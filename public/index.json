[{"categories":["ioBroker"],"content":"Hier findest du Infos rund um Wartung und Pflege deines ioBroker Docker Containers","date":"31.03.2023","objectID":"/posts/2023/03/31_iobroker_docker-container_wartung_und_pflege/","tags":[],"title":"ioBroker Docker Container: Wartung und Pflege","uri":"/posts/2023/03/31_iobroker_docker-container_wartung_und_pflege/"},{"categories":["ioBroker"],"content":"Einleitung Auch der zuverlässigste ioBroker Docker Container braucht hin und wieder ein bisschen Aufmerksamkeit. Ob Backups oder Updates – die regelmäßige Pflege deines Systems ist ein absolutes Muss. Mit Blick auf den heutigen “Welt-Backup-Tag” habe ich mich entschlossen, einen umfassenden und leicht verständlichen Beitrag zu diesem Thema zu verfassen. Im Mittelpunkt steht dabei, wie du deinen ioBroker am besten sicherst, Updates durchführst und welche praktischen Tools dir dabei unter die Arme greifen können. Bereit, in die Tiefen der Systemwartung einzutauchen? Lass uns gemeinsam sicherstellen, dass dein ioBroker immer auf der Höhe der Zeit ist und du stets ein gutes Backup in der Hinterhand hast. Viel Spaß beim Lesen! ","date":"31.03.2023","objectID":"/posts/2023/03/31_iobroker_docker-container_wartung_und_pflege/:1:0","tags":[],"title":"ioBroker Docker Container: Wartung und Pflege","uri":"/posts/2023/03/31_iobroker_docker-container_wartung_und_pflege/"},{"categories":["ioBroker"],"content":"Backups: Die Basis für alles Die Grundlage dafür, dass du überhaupt gefahrlos mit und an deinem System arbeiten, konfigurieren und aktualisieren kannst, bildet ein zuverlässiges und aktuelles Backup deiner ioBroker Docker Installation. Werfen wir einen Blick auf die Möglichkeiten die du hast und was es ggf. dabei zu beachten gilt. ","date":"31.03.2023","objectID":"/posts/2023/03/31_iobroker_docker-container_wartung_und_pflege/:2:0","tags":[],"title":"ioBroker Docker Container: Wartung und Pflege","uri":"/posts/2023/03/31_iobroker_docker-container_wartung_und_pflege/"},{"categories":["ioBroker"],"content":"Backup auf Dateiebene Beim Einrichten des ioBroker Docker Containers hast du die Konfigurationsdaten von ioBroker, die sich standardmäßig im Container unter /opt/iobroker befinden, in ein Verzeichnis oder Volume auf deinem Docker Host ausgelagert. Das Backup auf Dateiebene bezieht sich darauf, dieses ausgelagerte Verzeichnis zu sichern. Diese Sicherung erfolgt auf der Ebene des Docker Hosts und kann beispielsweise durch die Einrichtung eines Cronjobs in Kombination mit einem kleinen Skript automatisiert werden. Alternativ kannst du auch jedes Backup-Tool verwenden, das in der Lage ist, Daten unter Linux auf Dateiebene zu sichern. Diese Sicherungsstrategie gewährleistet, dass im Falle von Problemen oder Datenverlust eine zuverlässige Wiederherstellung auf Basis der gesicherten Dateien möglich ist. Achtung Um eine Inkonsistenz der Daten beim Datei-Backup zu vermeiden solltest du sicherstellen, dass der ioBroker Docker Container während der Sicherung gestoppt ist! Ergänzend zu diesem Ansatz ergeben sich aus dem Backup auf Dateiebene sowohl Vorteile als auch Nachteile: Vorteile Durch das Backup auf Dateiebene ergeben sich folgende Vorteile: 1:1 Kopie deiner aktuellen ioBroker Installation: Das Backup sichert exakt den Zustand deiner ioBroker-Umgebung, einschließlich aller Konfigurationen und Daten. Minimale Wiederherstellungszeit: Im Falle eines Problems ermöglicht das Backup auf Dateiebene eine schnelle Wiederherstellung. Hierzu müssen lediglich der ioBroker-Container gestoppt, die Dateien wiederhergestellt und der Container erneut gestartet werden. Kann mit Bordmitteln des Docker Hosts realisiert werden: Die Umsetzung dieser Backup-Strategie kann möglicherweise mithilfe der nativen Tools des Docker Hosts erfolgen, wie zum Beispiel bei einer Synology DiskStation durch Hyper Backup. Einfache Prüfung und Wiederherstellung einzelner Dateien: Da das Backup auf Dateiebene eine Kopie der einzelnen Dateien und Konfigurationen erstellt, ermöglicht es eine einfache Prüfung und selektive Wiederherstellung bestimmter Dateien, falls erforderlich. Nachteile Jedoch, wo Licht ist, ist auch Schatten. Hier sind mögliche Nachteile des Backups auf Dateiebene: ioBroker Container sollte beim Backup gestoppt sein: Um die Gefahr eines defekten Backups zu minimieren, sollte der ioBroker Container während des Backups gestoppt sein. Backup kann sehr groß sein: Da das gesamte ioBroker-Verzeichnis gesichert wird, kann das Backup beträchtlich groß werden. Dies sollte bei der Speicherplanung berücksichtigt werden. Kann systemressourcenintensiv sein: Das Erstellen von Backups auf Dateiebene kann systemressourcenintensiv sein, insbesondere wenn große Datenmengen regelmäßig gesichert werden müssen. Dies könnte die Leistung des Systems beeinträchtigen, während das Backup läuft. ","date":"31.03.2023","objectID":"/posts/2023/03/31_iobroker_docker-container_wartung_und_pflege/:2:1","tags":[],"title":"ioBroker Docker Container: Wartung und Pflege","uri":"/posts/2023/03/31_iobroker_docker-container_wartung_und_pflege/"},{"categories":["ioBroker"],"content":"Backup der Konfiguration aus ioBroker heraus Beim Backup der Konfiguration aus ioBroker heraus erfolgt eine gezielte Sicherung nur der essentiellen Dateien und Konfigurationsdaten. Im Gegensatz zum Backup auf Dateiebene, bei dem sämtliche Dateien der ioBroker-Installation gesichert werden und die Backup-Datei dementsprechend groß sein kann, beschränkt sich dieses Verfahren auf das Notwendigste. Im Falle einer Wiederherstellung lädt ioBroker die Adapter aus dem Internet herunter, installiert sie frisch und stellt dann die Konfiguration wieder her. Zusätzlich bietet ioBroker mit der integrierten Backup-Lösung über den Backitup-Adapter die Möglichkeit, Backups nach einem festgelegten Zeitplan automatisch zu erstellen. Auf Wunsch kopiert das System die Backups sogar in die Cloud oder auf ein externes Backup-Ziel. Hier ein Blick auf das ioBroker.backitup User Interface: Weiterführende Informationen: iobroker backup command (ioBroker Doku) ioBroker Backitup-Adapter (GitHub) Vorteile Diese Methode weist ebenfalls ihre eigenen Vorzüge auf: Backups sind relativ klein: Da nur die notwendigsten Dateien und Konfigurationsdaten gesichert werden, sind die resultierenden Backups vergleichsweise kompakt. Automatisierung direkt aus ioBroker heraus möglich (Backitup-Adapter): Durch die Nutzung des ioBroker.backitup-Adapters kann die Erstellung der Backups direkt aus der ioBroker-Oberfläche automatisiert werden. Erstellung des Backups während des Betriebs möglich: Die Sicherung der Konfiguration kann während des laufenden Betriebs erfolgen, ohne dass der ioBroker-Container gestoppt werden muss. Nachteile Natürlich existieren auch potentielle Nachteile: Eventuell sehr lange Wiederherstellungszeit durch Adapterinstallation aus dem Internet: Die Wiederherstellung könnte unter Umständen lange dauern, insbesondere wenn eine Vielzahl von Adaptern aus dem Internet heruntergeladen und installiert werden muss. Die Geschwindigkeit ist dabei abhängig von der Anzahl der Adapter und der Systemleistung. Bestimmte Voraussetzungen bei der Wiederherstellung gelten (z.B. kompatible js-controller-Version): Es müssen bestimmte Voraussetzungen erfüllt sein, um eine reibungslose Wiederherstellung sicherzustellen, wie beispielsweise die Kompatibilität mit der verwendeten js-controller-Version. Abhängigkeit von Online-Ressourcen: Da die Adapter aus dem Internet heruntergeladen werden, besteht eine Abhängigkeit von der Verfügbarkeit dieser Ressourcen. Wenn die Adapter-Downloads aus irgendeinem Grund nicht verfügbar sind, könnte dies die Wiederherstellung beeinträchtigen. Mögliche Inkompatibilitäten nach der Wiederherstellung: Aufgrund von Aktualisierungen oder Änderungen an den Adaptern könnte es zu Inkompatibilitäten mit der wiederhergestellten Konfiguration kommen. Dem kann allerdings entgegengewirkt werden, indem du dein System stets aktuell hältst. ","date":"31.03.2023","objectID":"/posts/2023/03/31_iobroker_docker-container_wartung_und_pflege/:2:2","tags":[],"title":"ioBroker Docker Container: Wartung und Pflege","uri":"/posts/2023/03/31_iobroker_docker-container_wartung_und_pflege/"},{"categories":["ioBroker"],"content":"Meine persönliche Backup-Strategie In meiner individuellen Backup-Strategie verfolge ich einen zweistufigen Ansatz, der sich als äußerst effektiv erwiesen hat. Auf der einen Seite sichere ich die Daten meines ioBroker Docker Containers auf Dateiebene des Docker Hosts mithilfe des Synology Tools “Active Backup for Business” (Absoluter Tip für Besitzer einer DiskStation!). Hierbei werden regelmäßig umfassende Dateibackups des gesamten ioBroker Docker Verzeichnisses erstellt. Der “Active Backup for Business Agent” auf meinem Docker Host ermöglicht eine nahtlose Zusammenarbeit mit der Backup-Software auf meiner Synology DiskStation. Im Bedarfsfall führt er das entsprechende Backup vollautomatisch durch. Ein herausragender Vorteil dieser Lösung liegt darin, dass ich über das Wiederherstellungsportal die Freiheit besitze, in die verschiedenen Backups einzusehen und bei Bedarf sogar nur einzelne Dateien gezielt wiederherzustellen. Zusätzlich setze ich aber auch auf die integrierte Backup-Funktion von ioBroker durch den Backitup-Adapter, um eine zusätzliche Sicherungsebene zu schaffen. Die automatischen Backups innerhalb von ioBroker gewährleisten, dass meine Konfigurationen, Einstellungen und Daten regelmäßig gesichert werden. Somit verfüge ich jederzeit über eine Backup-Datei, die mir eine reibungslose Wiederherstellung meines Systems nach einer Neuinstallation ermöglichen würde. Hierbei verlasse ich mich darauf, dass die täglichen ioBroker-Backups in meinen Backups auf Dateiebene integriert sind und zusätzlich vom Backitup Adapter sicher in der Cloud abgelegt werden. Durch diese Kombination aus Dateibackup auf Docker-Host-Ebene und den internen Sicherungsfunktionen von ioBroker bin ich zuversichtlich, dass meine ioBroker-Installation zu jeder Zeit optimal geschützt ist – unabhängig von den möglichen Widrigkeiten, die auftreten können. ","date":"31.03.2023","objectID":"/posts/2023/03/31_iobroker_docker-container_wartung_und_pflege/:2:3","tags":[],"title":"ioBroker Docker Container: Wartung und Pflege","uri":"/posts/2023/03/31_iobroker_docker-container_wartung_und_pflege/"},{"categories":["ioBroker"],"content":"Updates: Wartung ist wichtig! Hast du dein Backup auf dem neuesten Stand? Perfekt. Aber damit du es im Ernstfall gar nicht erst benötigst, ist es entscheidend, deinen ioBroker Docker Container regelmäßig zu warten und idealerweise immer aktuell zu halten. Hierbei gilt die einfache Faustregel: Kleine Schritte sind besser als große. Das bedeutet, wenn du dein System regelmäßig mit Updates versorgst, reduzierst du das Risiko von Komplikationen während des Updates oder möglicherweise notwendigen aufwändigen Zwischenschritten. Das liegt vor Allem daran, dass sich Software ständig weiterentwickelt und Entwickler nicht immer garantieren können, dass ein Update von Version 1 direkt auf Version 3 genauso reibungslos funktioniert wie ein schrittweises Update von Version 1 auf Version 2 und dann auf Version 3. Werfen wir einen Blick auf die verschiedenen Ebenen der Updates für deinen ioBroker Docker Container und wie du diese Updates am besten installieren kannst. ","date":"31.03.2023","objectID":"/posts/2023/03/31_iobroker_docker-container_wartung_und_pflege/:3:0","tags":[],"title":"ioBroker Docker Container: Wartung und Pflege","uri":"/posts/2023/03/31_iobroker_docker-container_wartung_und_pflege/"},{"categories":["ioBroker"],"content":"Linux Paket Updates (optional) Das ioBroker Docker Image umfasst eine Vielzahl von Linux-Paketen, die die Grundlage für die Funktion von ioBroker innerhalb deines Docker Containers bilden. Beispiele für diese Pakete, die dir möglicherweise aus der Admin-Oberfläche von ioBroker bekannt sind, sind unter anderem nodejs oder npm. Um Updates für diese Pakete zu installieren, verfügen die meisten Linux-Systeme, einschließlich des ioBroker Docker Containers, über einen Paketmanager – in unserem Fall ist dies apt. Mit Hilfe dieses Paketmanagers kannst du problemlos innerhalb deines Docker Containers Linux-Pakete installieren und aktualisieren. Dies geschieht beispielsweise über die Kommandozeile durch den Aufruf von apt update \u0026\u0026 apt upgrade. Eine alternative, und besonders empfohlene Methode, insbesondere im Kontext von Docker Containern, besteht darin, einfach dein Docker Image zu aktualisieren und den ioBroker Docker Container anschließend neu zu erstellen. Mehr dazu erfährst du im nächsten Abschnitt. ","date":"31.03.2023","objectID":"/posts/2023/03/31_iobroker_docker-container_wartung_und_pflege/:3:1","tags":[],"title":"ioBroker Docker Container: Wartung und Pflege","uri":"/posts/2023/03/31_iobroker_docker-container_wartung_und_pflege/"},{"categories":["ioBroker"],"content":"Docker Image Updates Neben den Linux-Paketen, die im ioBroker Docker Image integriert sind, wird auch das Image selbst kontinuierlich weiterentwickelt. Bei jeder neuen Version wird automatisch ein aktualisiertes Docker Image erstellt und zum Download bereitgestellt. Dieses Image enthält sowohl die neueste ioBroker-Version als auch die aktuellen Versionen aller enthaltenen Linux-Pakete. Durch ein Update des Docker Images erreichst du also gleich zwei Ziele auf einmal. Einerseits wird das Docker Image selbst auf den neuesten Stand gebracht, andererseits werden auch die Linux-Pakete aktualisiert. Dieser Ansatz ermöglicht es dir, effizient sicherzustellen, dass nicht nur ioBroker, sondern auch alle erforderlichen Systemkomponenten in ihrer aktuellen Version vorliegen. ","date":"31.03.2023","objectID":"/posts/2023/03/31_iobroker_docker-container_wartung_und_pflege/:3:2","tags":[],"title":"ioBroker Docker Container: Wartung und Pflege","uri":"/posts/2023/03/31_iobroker_docker-container_wartung_und_pflege/"},{"categories":["ioBroker"],"content":"Adapter Updates Lass uns nun zu den Updates innerhalb der ioBroker-Software übergehen. Da die Adapter deiner ioBroker-Instanz innerhalb des Docker Containers unter /opt/iobroker installiert sind und du dieses Verzeichnis bei jedem Update deines Containers wieder einbindest, bleiben die Adapterversionen beim Aktualisieren des Containers selbst unberührt. Stattdessen erfolgt die Aktualisierung deiner Adapter normalerweise über die Admin-Oberfläche deines ioBrokers. Im Abschnitt “Adapter” werden dir neue Versionen vorgeschlagen, die sich durch einen einfachen Klick auf den entsprechenden Button direkt installieren lassen. Alternativ gibt es aber natürlich auch die Möglichkeit Adapter über die Kommandozeile zu installieren. ","date":"31.03.2023","objectID":"/posts/2023/03/31_iobroker_docker-container_wartung_und_pflege/:3:3","tags":[],"title":"ioBroker Docker Container: Wartung und Pflege","uri":"/posts/2023/03/31_iobroker_docker-container_wartung_und_pflege/"},{"categories":["ioBroker"],"content":"ioBroker Core Updates Beim “ioBroker Core” handelt es sich um den js-controller, der das Zentrum des ioBrokers bildet. Der js-controller ist ebenfalls unter /opt/iobroker installiert und wird daher durch ein Update des Docker Images nicht automatisch aktualisiert. Früher war es notwendig, ein Update des js-controllers über die Kommandozeile durchzuführen. Inzwischen kann jedoch ein js-controller-Update, ähnlich wie ein Adapter-Update, bequem über die Admin-Oberfläche im ioBroker erfolgen. Ein verfügbares Update wird im Abschnitt “Hosts” angezeigt. Natürlich gibt es auch hier weitere Möglichkeiten für die Installation des Updates. Stets aktuelle Details zu den update-Möglichkeiten des js-controllers im ioBroker Docker Container findest du in der Offiziellen Doku des ioBroker Docker Images. ","date":"31.03.2023","objectID":"/posts/2023/03/31_iobroker_docker-container_wartung_und_pflege/:3:4","tags":[],"title":"ioBroker Docker Container: Wartung und Pflege","uri":"/posts/2023/03/31_iobroker_docker-container_wartung_und_pflege/"},{"categories":["ioBroker"],"content":"Fazit Abschließend möchte ich ein bekanntes Zitat teilen, das nicht nur in der ioBroker-Community, sondern auch in der gesamten digitalen Welt seine Berechtigung hat: “Kein Backup, kein Mitleid!” 😄 Dieser humorvolle Spruch verdeutlicht, wie entscheidend Backup-Strategien sind. Ich hoffe, mein Beitrag konnte dir einen ausführlichen Überblick über die Wartung und Pflege deines ioBroker Docker Containers verschaffen. Die Bedeutung von Backups sollte nicht unterschätzt werden, insbesondere wenn du viel Zeit und Herzblut in dein Smarthome investiert hast. Es ist meiner Meinung nach unumgänglich, dass du eine eigene Backup-Strategie entwickelst und konsequent verfolgst. In einer Zeit, in der täglich neue Sicherheitslücken Schlagzeilen machen und die Bedeutung der IT-Sicherheit stetig wächst, sollte es fast selbstverständlich sein, Geräte, die mit dem Internet verbunden sind, auf dem neuesten Softwarestand zu halten. Wenn du dies bereits bei deinem Smartphone und Notebook praktizierst, warum nicht auch im Smarthome? Denn am Ende des Tages gilt: Die Sicherheit deiner digitalen Welt liegt in deinen Händen. Für Fragen und Feedback nutze gerne die Kommentarfunktion zu diesem Beitrag. MfG, André ","date":"31.03.2023","objectID":"/posts/2023/03/31_iobroker_docker-container_wartung_und_pflege/:4:0","tags":[],"title":"ioBroker Docker Container: Wartung und Pflege","uri":"/posts/2023/03/31_iobroker_docker-container_wartung_und_pflege/"},{"categories":["Tutorials","Portainer"],"content":"Wie verwalte ich mehrere Docker Hosts über eine Portainer Instanz?","date":"05.03.2023","objectID":"/posts/2023/03/05_verwaltung_mehrerer_docker_hosts_mit_portainer/","tags":[],"title":"Verwaltung mehrerer Docker Hosts mit Portainer","uri":"/posts/2023/03/05_verwaltung_mehrerer_docker_hosts_mit_portainer/"},{"categories":["Tutorials","Portainer"],"content":"Einleitung In diesem Tutorial zeige ich dir, wie du mit einer Portainer Instanz, ohne großen Aufwand, auch mehrere Docker Hosts verwalten kannst. Dazu werden wir auf einem zweiten Docker Host den Portainer Agent installieren und ihn mit unserer bestehenden Portainer Instanz verbinden. ","date":"05.03.2023","objectID":"/posts/2023/03/05_verwaltung_mehrerer_docker_hosts_mit_portainer/:1:0","tags":[],"title":"Verwaltung mehrerer Docker Hosts mit Portainer","uri":"/posts/2023/03/05_verwaltung_mehrerer_docker_hosts_mit_portainer/"},{"categories":["Tutorials","Portainer"],"content":"Voraussetzungen Folgendes setze ich voraus: Funktionierende Portainer Instanz (siehe hier und/oder hier) Zweiter, Linux basierter Docker Host (Docker up \u0026 running) Zugriff auf die Kommandozeile des zweiten Docker Hosts ","date":"05.03.2023","objectID":"/posts/2023/03/05_verwaltung_mehrerer_docker_hosts_mit_portainer/:2:0","tags":[],"title":"Verwaltung mehrerer Docker Hosts mit Portainer","uri":"/posts/2023/03/05_verwaltung_mehrerer_docker_hosts_mit_portainer/"},{"categories":["Tutorials","Portainer"],"content":"Portainer Agent auf dem zweiten Docker Host einrichten Damit wir den Docker Dienst auf unserem zweiten Docker Host aus der Ferne verwalten können benötigen wir einen “Portainer Agent”. Dabei handelt es sich, wie beim Portainer selbst, lediglich um einen Docker Container, den wir lokal auf unserem zweiten Docker Host einrichten müssen. Wie schon beim Portainer geschieht dies über die Kommandozeile. Mit dem folgenden Befehl starten wir also unseren Portainer Agent: docker run -d -p 9001:9001 \\ --name portainer-agent --restart=always \\ -v /var/run/docker.sock:/var/run/docker.sock \\ -v /var/lib/docker/volumes:/var/lib/docker/volumes \\ portainer/agent:latest Der Befehl setzt sich dabei aus folgenden Parametern zusammen: docker run « zum Erstellen eines neuen Containers -d « für “detached” -p 9001:9001 « Port über den sich Portainer mit dem Agent verbindet --name portainer-agent « Container Name --restart=always « Restart Policy = always -v /var/run/docker.sock:/var/run/docker.sock « Mount des Docker Sockets für die Verwaltung des Docker Dienstes -v /var/lib/docker/volumes:/var/lib/docker/volumes « Mount des Verzeichnisses für Docker Volumes portainer/agent:latest « Verwendetes Image und Tag Hinweis Sollte der Benutzer, mit dem du an der Kommandozeile des zweiten Docker Hosts angemeldet bist keine Berechtigung für die Ausführung des docker run Befehls besitzen, ist ggf. ein sudo erforderlich. Des Weiteren prüfe bitte ob der verwendete Port 9001 keinen Postkonflikt verursacht (ist z.B. auch der Standardport für die ioBroker Objects-DB). Durch Änderung des Parameters -p 9001:9001 in z.B. -p 8889:9001 ließe sich der Port, über den Portainer mit dem Agent Kontakt auf nimmt, auf Port 8889ändern. Wie du sicherlich festgestellt hast, ähnelt das Kommando sehr stark dem Kommando mit dem wir auch schon den Portainer gestartet haben. Der größte Unterschied besteht darin, dass wir kein lokales Verzeichnis für die Speicherung von Konfigurationsdaten benötigen, denn diese Daten werden nicht im Agent, sondern im Portainer gespeichert. Also in dem Verzeichnis, dass wir bei der Einrichtung des Portainers auf unserem “Haupt-Host” eingebunden haben. Mit /var/lib/docker/volumes ist allerdings ein neuer Mount hinzugekommen. Hier handelt es sich um das Standardverzeichnis in dem Docker selbst Volumes erstellen kann. Damit später vom Portainer darauf zugegriffen werden kann, mounten wir dieses mit in den Portainer Agent. Alle Anderen Parameter solltest du bereits von der Einrichtung des Portainers kennen. Ich spare mir daher hier die Wiederholung. Die Ausgabe auf der Kommandozeile sollte nun also ungefähr so aussehen: andre@vm-docker-test:~$ sudo docker run -d -p 8889:9001 --name portainer-agent --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker/volumes:/var/lib/docker/volumes portainer/agent:latest [sudo] Passwort für andre: Unable to find image 'portainer/agent:latest' locally latest: Pulling from portainer/agent 772227786281: Pull complete 96fd13befc87: Pull complete a072f93dbf8b: Pull complete a7de7247ee92: Pull complete cd4280d0ffc0: Pull complete 32c744610ec2: Pull complete 77bbe6ca9fb5: Pull complete 45b6ddb3fba1: Pull complete 1783048236fb: Pull complete 93fd384a1bda: Pull complete Digest: sha256:76598c54b29d90636cbe533bf96d5efbd885008b3d5e5ca36a9cc9238ebe47b3 Status: Downloaded newer image for portainer/agent:latest 3bdb68ee29134fe747d8d9a40790b939427d11719170bf226cfeab9b47bfa83c Mit docker ps kannst du im Anschluss prüfen, ob der Container ordnungsgemäß erstellt worden ist und welchen Status er hat: andre@vm-docker-test:~$ sudo docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 3bdb68ee2913 portainer/agent:latest \"./agent\" 2 minutes ago Up 2 minutes 0.0.0.0:8889-\u003e9001/tcp, :::8889-\u003e9001/tcp portainer-agent ","date":"05.03.2023","objectID":"/posts/2023/03/05_verwaltung_mehrerer_docker_hosts_mit_portainer/:3:0","tags":[],"title":"Verwaltung mehrerer Docker Hosts mit Portainer","uri":"/posts/2023/03/05_verwaltung_mehrerer_docker_hosts_mit_portainer/"},{"categories":["Tutorials","Portainer"],"content":"Verbindung zwischen Portainer und Agent herstellen Weiter geht es nun in unserer Portainer Web UI. Unter “Settings” navigieren wir zum Menüpunkt “Environments” und fügen über den Button “+ Add environment” ein neues Environment hinzu. Im nun startenden “Environment Wizard” wählen wir den Eintrag “Docker Standalone” und bestätigen mit dem Button “Start Wizard”. Im nächsten Schritt nutzen wir die vorausgewählte Option “Agent”. Wie du sehen kannst gibt es weitere Möglichkeiten Endpunkte zu verbinden. Meiner Meinung nach ist allerdings die Variante über den Agent die einfachste und sicherste Option. Etwas weiter unten müssen wir nun die Informationen zu unserem Environment ergänzen. Wir vergeben einen Namen und füllen die “Endpoint URL” mit der IP-Adresse unseres zweiten Docker Hosts, sowie dem für die Kommunikation vorgesehenen Port, getrennt durch einen Doppelpunkt, aus. Beim Klick auf “Connect” prüft Portainer unsere Konfiguration und fügt in der Liste der Environments (rechts am Bildrand) einen entsprechenden Eintrag hinzu. Mit einem Klick auf den Button “Close” am ende der Seite schließen wir die Einrichtung ab. Wir landen in der Liste unserer Environments. Unser neues Environment sollte nun in der Liste aufgeführt sein. Hinweis Die Verbindung vom Portainer zum Agent kann nur einmal hergestellt werden. Damit sich nicht einfach eine zweite Portainer-Instanz mit dem Agent verbinden kann, und damit Zugriff auf den Docker Dienst erhält, tauschen Portainer und Agent bei der ersten Verbindung ein Secret aus. Soll der Agent später an eine andere Portainer Instanz umziehen, so muss der Portainer Agent Container neu erstellt werden. Weitere Infos dazu findest du in der Portainer Doku. Wechseln wir nun in den Menüpunkt “Home”, sehen wir eine Übersicht der eingerichteten “Environments” zusammen mit Status und einigen Statistik-Werten. Mit einem Klick auf unser neu eingerichtetes Environment gelangen wir in das Dashboard unseres zweiten Docker Hosts. In der Menüleiste sehen wir den ausgewählten Docker Host und können ihn nun über die Menüpunkte “Stacks”, “Containers”, “Images” usw. verwalten. Ich hoffe ich konnte dir mit diesem Tutorial zeigen was zu tun ist, um mit einer Portainer Instanz mehrere Docker Hosts verwalten zu können. Für Fragen und Feedback nutze gerne die Kommentarfunktion zu diesem Beitrag. MfG, André ","date":"05.03.2023","objectID":"/posts/2023/03/05_verwaltung_mehrerer_docker_hosts_mit_portainer/:4:0","tags":[],"title":"Verwaltung mehrerer Docker Hosts mit Portainer","uri":"/posts/2023/03/05_verwaltung_mehrerer_docker_hosts_mit_portainer/"},{"categories":["Tutorials","ioBroker"],"content":"Wie kann ich USB-Geräte im ioBroker Docker Container nutzen?","date":"03.03.2023","objectID":"/posts/2023/03/02_usb-geraete_im_iobroker_docker_container/","tags":[],"title":"USB-Geräte im ioBroker Docker Container","uri":"/posts/2023/03/02_usb-geraete_im_iobroker_docker_container/"},{"categories":["Tutorials","ioBroker"],"content":"Einleitung In diesem Tutorial zeige ich dir wie du ein USB-Gerät in deinen ioBroker Container durchreichen kannst um zum Beispiel einen Zigbee-Stick in ioBroker verwenden zu können. ","date":"03.03.2023","objectID":"/posts/2023/03/02_usb-geraete_im_iobroker_docker_container/:1:0","tags":[],"title":"USB-Geräte im ioBroker Docker Container","uri":"/posts/2023/03/02_usb-geraete_im_iobroker_docker_container/"},{"categories":["Tutorials","ioBroker"],"content":"Voraussetzungen Folgendes setze ich voraus: Linux basierter Docker Host (NAS Systeme basieren in der Regel auf Linux) Zugriff auf die Kommandozeile des Docker Hosts Installierter und gestarteter Docker Dienst Eingerichteter ioBroker Docker Container ","date":"03.03.2023","objectID":"/posts/2023/03/02_usb-geraete_im_iobroker_docker_container/:2:0","tags":[],"title":"USB-Geräte im ioBroker Docker Container","uri":"/posts/2023/03/02_usb-geraete_im_iobroker_docker_container/"},{"categories":["Tutorials","ioBroker"],"content":"USB-Gerät auf dem Host identifizieren Damit wir das USB-Gerät in den Docker Container durchreichen können müssen wir erst einmal identifizieren unter welchem Pfad es auf unserem Docker Host zur Verfügung steht und angesprochen werden kann. Unter Linux befinden sich die Geräte (devices) in der Regel im Verzeichnis /dev. Doch welches Gerät ist jetzt unser USB-Stick? Die einfachste Lösung das herauszufinden ist das Ausführen des Befehls dmesg unmittelbar nach dem Anstecken des USB-Geräts. Ziemlich am Ende der Ausgabe sollte sich erkennen lassen, dass ein USB-Gerät angesteckt worden ist. Bei mir auf der DiskStation sieht das dann in etwa so aus: An der Ausgabe ist zu erkennen, dass mein USB-Gerät als ttyACM0 auf dem Host zur Verfügung steht. Der Pfad wäre dann damit /dev/ttyACM0. Falls dieses Vorgehen bei dir nicht zum Erfolg führt, kannst du es auch mit dem Befehl lsusb versuchen. Damit bekommst du eine Liste aller USB-Geräte angezeigt. Auf meiner DiskStation sieht das dann so aus: Da ich weiß, das es sich neo meinem Zigbee-Stick um einen Stick von Texas Instruments handelt, kann ich der Ausgabe entnehmen, dass er an den USB-Port usb2, genauer sogar an 2-1 gesteckt wurde. Mit dem Befehl ll /sys/class/tty | grep usb2 oder ll /sys/class/tty | grep 2-1 kann ich nun ebenfalls ermitteln dass mein Stick unter dem Alias ttyACM0 zu finden ist: Der Pfad meines USB-Geräts auf dem Docker Host ist also /dev/ttyACM0. ","date":"03.03.2023","objectID":"/posts/2023/03/02_usb-geraete_im_iobroker_docker_container/:3:0","tags":[],"title":"USB-Geräte im ioBroker Docker Container","uri":"/posts/2023/03/02_usb-geraete_im_iobroker_docker_container/"},{"categories":["Tutorials","ioBroker"],"content":"Best Practice: Nutze /dev/serial/by-id/… Die beiden bisher genannten Wege zur Ermittlung des Pfades unter dem das USB-Gerät ansprechbar ist, sind Beispiele von meiner DiskStation. Auf anderen Linux Systemen, wie z.B. einem Raspberry Pi, haben wir in der Regel die Möglichkeit ein Gerät nicht nur über den Alias (z. B. ttyACM0), sondern auch by-id anzusprechen. Dazu kann man mit dem Befehl ls -al /dev/serial/by-id/ eine Liste der Geräte ausgeben lassen, die sich per eindeutige ID ansprechen lassen. In der Ausgabe sieht dies dann so aus: Auch hier erkennen wir wieder meinen USB-Stick von Texas Instruments (usb-Texas_Instruments…). Zusätzlich sehen wir auch die Verlinkung zum Alias ttyACM0. Wenngleich die Nutzung der ID des Geräts aufgrund der Länge komplizierter zu sein scheint, so hat diese Methode einen entscheidenden Vorteil. Während es nämlich möglich ist, dass bei einem Neustart den verwendeten USB-Geräten andere Aliase zugeordnet werden, so ist die ID eindeutig und bleibt damit immer gleich. Wenn dein Linux Host also diese Variante unterstützt, empfiehlt es sich, vor Alle bei mehreren USB-Devices, den „by-id“-Pfad zu verwenden und nicht den Alias. Der Vollständigkeit halber sei gesagt, dass es natürlich auch noch andere Wege gibt, den Pfad des USB-Geräts zu ermitteln. Welche Möglichkeiten du hast hängt dabei natürlich auch von dem Verwendeten System ab. Google ist hier in der Regel eine gute Anlaufstelle für weitere Informationen. ","date":"03.03.2023","objectID":"/posts/2023/03/02_usb-geraete_im_iobroker_docker_container/:3:1","tags":[],"title":"USB-Geräte im ioBroker Docker Container","uri":"/posts/2023/03/02_usb-geraete_im_iobroker_docker_container/"},{"categories":["Tutorials","ioBroker"],"content":"ioBroker Docker Container konfigurieren Nachdem wir den Pfad unseres USB-Geräts ermitteln konnten, ist es nun Zeit das Gerät in den ioBroker Docker Container durchzureichen. Dabei müssen wir gleich an zwei Stellen die Konfiguration unseres ioBroker Docker Containers anpassen. Zunächst reichen wir den ermittelten Pfad in den Docker Container durch. Dazu werfen wir beim Erstellen bzw, Bearbeiten des Containers über Portainer einen Blick auf die „Advanced container settings“, genauer in den Bereich „Runtime \u0026 Resources“. Dort gibt es einen Punkt „Devices“. Über „add device“ können wir ein Gerät hinzufügen Unter „host“ ist der zuvor ermittelte Pfad des Geräts zu hinterlegen. Bei Verwendung des Alias-Pfads (also z.B. /dev/ttyACM0) empfehle ich das Gerät auch innerhalb des Container unter dem gleichen Pfad verfügbar zu machen um nicht durcheinander zu kommen. Das Ganze sieht dann in etwa so aus: Für den Fall, dass wir den eindeutigen, langen „by-id“-Pfad verwenden wollen, empfiehlt es sich zumindest im Container einen Alias zu verwenden. Möglich wäre z.B. /dev/serial/by-id/zigbee für einen Zigbee-Stick. Der zweite Teil der Konfiguration bezieht sich auf die Umgebungsvariable USBDEVICES. Um Sicher zu stellen, dass der ioBroker innerhalb des Containers über die notwendigen Rechte für den Zugriff auf das Gerät verfügt, setzen wir unter „Advanced container settings“ im Punkt „Env“ die Umgebungsvariable USBDEVICES und füllen den Wert mit dem Pfad des Gerätes innerhalb des Containers, also entweder /dev/ttyACM0 oder /dev/serial/by-id/zigbee. Weitere Infos zur Verwendung der Umgebungsvariable findest du in der Dokumentation zum Docker Image. Für mein Beispiel würde die Konfiguration also so aussshen: Anschließend starten wir den Container. ","date":"03.03.2023","objectID":"/posts/2023/03/02_usb-geraete_im_iobroker_docker_container/:4:0","tags":[],"title":"USB-Geräte im ioBroker Docker Container","uri":"/posts/2023/03/02_usb-geraete_im_iobroker_docker_container/"},{"categories":["Tutorials","ioBroker"],"content":"Überprüfung nach Start des Containers Nach dem Start sollte das USB-Gerät nun innerhalb des Containers zur Verfügung stehen. Prüfen lässt sich das recht einfach über ein ls -al /dev/* bzw. ls -al /dev/serial/by-id/* auf der Kommandozeile des Containers. Hier sollte nun das durchgereichte Gerät auftauchen und die folgenden Berechtigungseinstellungen besitzen: Das sollte es dann auch schon gewesen sein. Jetzt müsst ihr nur noch den entsprechenden Adapter installieren und euer Gerät in der Adapter-Konfiguration entsprechend angeben. ","date":"03.03.2023","objectID":"/posts/2023/03/02_usb-geraete_im_iobroker_docker_container/:5:0","tags":[],"title":"USB-Geräte im ioBroker Docker Container","uri":"/posts/2023/03/02_usb-geraete_im_iobroker_docker_container/"},{"categories":["Tutorials","ioBroker"],"content":"Bonus: Durchreichen des USB-Geräts mit docker-compose (Portainer Stacks) Selbstverständlich lässt sich die Konfiguration auch in docker-compose bzw. Portainer Stacks abbilden. Hier ein Beispiel des ioBroker Docker Containers aus diesem Tutorial mit dem USB-Gerät von oben: version: \"3\" services: iobroker: container_name: iobroker image: buanet/iobroker:latest network_mode: host restart: always environment: - PACKAGES=nano - USBDEVICES=/dev/ttyACM0 devices: - /dev/ttyACM0:/dev/ttyACM0 volumes: - /volume1/docker/iobroker-data:/opt/iobroker Für Fragen und Feedback nutze gerne die Kommentarfunktion zu diesem Beitrag. MfG, André ","date":"03.03.2023","objectID":"/posts/2023/03/02_usb-geraete_im_iobroker_docker_container/:6:0","tags":[],"title":"USB-Geräte im ioBroker Docker Container","uri":"/posts/2023/03/02_usb-geraete_im_iobroker_docker_container/"},{"categories":["Tutorials","ioBroker","DiskStation"],"content":"Ein Tutorial zur Einrichtung des ioBroker Docker Images auf der Synology DiskStation","date":"27.02.2023","objectID":"/posts/2023/02/27_iobroker_unter_docker_auf_der_synology_diskstation/","tags":[],"title":"ioBroker unter Docker auf der Synology DiskStation","uri":"/posts/2023/02/27_iobroker_unter_docker_auf_der_synology_diskstation/"},{"categories":["Tutorials","ioBroker","DiskStation"],"content":"Einleitung In diesem Tutorial zeige ich dir, wie du mit Hilfe von Docker und Portainer das ioBroker Docker Image auf deiner Synology DiskStation installierst. Neben den verlinkten Informationen zu Docker und Portainer empfehle ich dir vorab einen Blick in meinen letzten Beitrag zu werfen. Hier habe ich bereits einmal die Grundlagen zum ioBroker Docker Image erläutert. ","date":"27.02.2023","objectID":"/posts/2023/02/27_iobroker_unter_docker_auf_der_synology_diskstation/:1:0","tags":[],"title":"ioBroker unter Docker auf der Synology DiskStation","uri":"/posts/2023/02/27_iobroker_unter_docker_auf_der_synology_diskstation/"},{"categories":["Tutorials","ioBroker","DiskStation"],"content":"Voraussetzungen Wie immer starte ich mit einer kurzen Liste der Voraussetzungen die zum Gelingen des Tutorials erfüllt sein sollten. Synology DiskStation mit installiertem Docker Paket Synology DiskStation Manager (DSM) in Version 6 oder 7 Portainer zur Verwaltung des Docker Dienstes Internetzugang ","date":"27.02.2023","objectID":"/posts/2023/02/27_iobroker_unter_docker_auf_der_synology_diskstation/:2:0","tags":[],"title":"ioBroker unter Docker auf der Synology DiskStation","uri":"/posts/2023/02/27_iobroker_unter_docker_auf_der_synology_diskstation/"},{"categories":["Tutorials","ioBroker","DiskStation"],"content":"Vorbereitungen ","date":"27.02.2023","objectID":"/posts/2023/02/27_iobroker_unter_docker_auf_der_synology_diskstation/:3:0","tags":[],"title":"ioBroker unter Docker auf der Synology DiskStation","uri":"/posts/2023/02/27_iobroker_unter_docker_auf_der_synology_diskstation/"},{"categories":["Tutorials","ioBroker","DiskStation"],"content":"Persistente Datenspeicherung Bevor wir den ioBroker Docker Container anlegen, sollten wir uns Gedanken um den Speicherort der ioBroker Konfigurationsdaten machen. Um später einen einfachen Zugriff auf die Daten zu haben, empfehle ich auf der DiskStation das Anlegen eines gemeinsamen Ordners docker auf den wir dann über die File Station in der Web UI unserer DiskStation zugreifen können. Solltest du bereits den Portainer nach meiner Anleitung installiert haben, ist dieses Verzeichnis vermutlich schon vorhanden und wir brauchen nur noch ein separates Unterverzeichnis für den ioBroker anlegen. Bei der Benennung wäre mein Vorschlag hier (analog zum Portainer Ordner) iobroker-data. ","date":"27.02.2023","objectID":"/posts/2023/02/27_iobroker_unter_docker_auf_der_synology_diskstation/:3:1","tags":[],"title":"ioBroker unter Docker auf der Synology DiskStation","uri":"/posts/2023/02/27_iobroker_unter_docker_auf_der_synology_diskstation/"},{"categories":["Tutorials","ioBroker","DiskStation"],"content":"Überlegungen zum Netzwerk Das Thema Docker und Netzwerk ist immer wieder ein Knackpunkt im Smarthome mit Docker. Prinzipiell reden wir hier über 3 mögliche Kandidaten: Bridge, Host und MACVLAN. Dabei hat jedes Netzwerk so seine Vor- und Nachteile. Im folgenden gebe ich einen wirklich kurzen, stark vereinfachten Überblick in Bezug auf ioBroker als kleine Entscheidungshilfe. Bridge Beim Bridge Netzwerk befindet sich der ioBroker Docker Container in einem abgeschotteten, virtuellen Netzwerk. Damit er dennoch mit der Außenwelt (deinem Heimnetzwerk) kommunizieren kann, müssen über das Bridge Netzwerk manuell alle Ports freigegeben werden, die für die Kommunikation benötigt werden. Je nach verwendeten ioBroker Adaptern kann das eine relativ lange Liste sein. Außerdem gibt es Einschränkungen bei Adaptern die z.B. eine Discovery-Funktion bereitstellen bzw. voraussetzen. Da die Kommunikation mit dem ioBroker nur über die freigegeben Ports möglich ist, gelangen Broad- oder Multicast-Pakete nicht zum ioBroker und der betreffende Adapter kann ggf. nicht benutzt werden. Host Beim Host Netzwerk erhält der ioBroker Docker Container vollen Zugriff auf die Netzwerkschittstelle(n) der DiskStation. Er kümmert sich selbstständig um die zu öffnenden Ports und lauscht so auch auf alle anderen Pakete die die Netzwerkschnittstelle der DiskStation erreichen. Allerdings kann es hierbei zu Portkonflikten kommen. Dies geschieht, wenn der ioBroker versucht für sich oder einen seiner Adapter einen Port zu öffnen, den vielleicht schon der DiskStation Manager oder einer seiner Services verwendet. MACVLAN Beim MACVLAN erhält der ioBroker Docker Container eine virtuelle IP-Adresse, z.B. aus dem Netzwerk Bereich in dem sich auch deine DiskStation befindet. Dadurch erscheint der Container im Netzwerk wie ein eigenständiges Gerät mit IP-Adresse und Hostnamen. Er kümmert sich selbstständig um die Freigabe von Ports. Durch die eigene IP-Adresse besteht keine Gefahr von Portkonflikten mit der DiskStation. Allerdings setzt die Konfiguration eines MACVLAN ein gewisses Maß an Wissen zum Thema Netzwerke voraus. Kurzes Fazit Zusammengefasst lässt sich dazu also sagen: Mit Bridge macht man nichts kaputt, es ist allerdings aufwändiger zu konfigurieren und beinhaltet teils unangenehme Einschränkungen. Das Host Netzwerk ist einfach konfiguriert, gilt aber, aufgrund des weitreichenden Zugriffs auf die Netzwerkschnittstelle, als die potentiell unsicherste Lösung. MACVLAN kommt bei all dem noch am Besten weg, ist aber sicher nicht für jeden “mal eben so” zu konfigurieren. Kurzum: Für Einsteiger empfehle ich Host, der fortgeschrittene(re) User wagt sich an das MACVLAN. Zum “Ausprobieren” von ioBroker oder für die Kommunikation zu anderen Containern eignet sich das Bridge Netzwerk. Weiterführende Infos zum Thema Netzwerke in Docker findest du in den Docker Docs. Eine Anleitung zum Einrichten eines benutzerdefinierten Bridge Netzwerks in meinem Tutorial Einrichtung eines benutzerdefinierten Bridge Netzwerks mit Portainer. Eine Anleitung zur Einrichtung eines MCVLAN in meinem Tutorial Einrichtung eines MACVLAN Netzwerks mit Portainer. ","date":"27.02.2023","objectID":"/posts/2023/02/27_iobroker_unter_docker_auf_der_synology_diskstation/:3:2","tags":[],"title":"ioBroker unter Docker auf der Synology DiskStation","uri":"/posts/2023/02/27_iobroker_unter_docker_auf_der_synology_diskstation/"},{"categories":["Tutorials","ioBroker","DiskStation"],"content":"Übernahme von Konfigurationsdaten Solltest du ioBroker bereits auf einer anderen Platform betreiben, so kannst du per Backup \u0026 Restore deine Daten vom Altsystem mitnehmen. Da der Restore erst nach dem Erstellen des Containers erfolgt, kannst du das Tutorial einfach bis zum Ende durcharbeiten und dich erst wenn der ioBroker in der Grundinstallation läuft um den Restore kümmern. Von einem kompletten Umzug des ioBroker Datenverzeichnisses (/opt/iobroker) zu Docker würde ich jedoch abraten. Das ist zwar theoretisch möglich, birgt aber viele kleine mögliche Fehlerquellen. Außerdem würdest du so auch alle Altlasten, wie temporäre Dateien, mit schleppen. Weitere Details zu Backup \u0026 Restore findest du in der offiziellen ioBroker Dokumentation sowie in der Doku zum Docker Image. ","date":"27.02.2023","objectID":"/posts/2023/02/27_iobroker_unter_docker_auf_der_synology_diskstation/:3:3","tags":[],"title":"ioBroker unter Docker auf der Synology DiskStation","uri":"/posts/2023/02/27_iobroker_unter_docker_auf_der_synology_diskstation/"},{"categories":["Tutorials","ioBroker","DiskStation"],"content":"Container mit Portainer erstellen Nachdem alles Vorbereitet ist, können wir mit dem Erstellen des Docker Containers über Portainer beginnen. Dazu rufen wir mit einem Klick auf den Button “+ Add container” im Menüpunkt “Containers” den Dialog für die Erstellung eines neuen Containers auf. Wir vergeben einen Namen für unseren Container, in meinem Fall iobroker und füllen das Feld “Image” mit dem Namen und Tag des Images, welches wir verwenden wollen. In diesem Fall verwende ich buanet/iobroker:latest. Wenn wir vor hätten den Container mit einem Bridge Netzwerk auszuführen, dann bestünde an dieser Stelle, unter “Manual network port publishing”, die Möglichkeit das entsprechende Port Mapping durchzuführen. Da ich meinen Container allerdings mit der Host Netzwerk Option erstellen werde, kann ich diese Einstellung ignorieren. Hinweis Warum der Tag latest eigentlich keine gute Wahl für ein Produktivsystem ist, kannst du hier nachlesen. Am unteren Ende des Dialogs finden wir die “Advanced container settings”. In der Registerkarte “Volumes” mounten wir nun unser Verzeichnis, welches wir in der File Station angelegt haben. Zunächst tragen wir den Pfad innerhalb des Containers (/opt/iobroker) ein und wählen “Bind”. Daraufhin können wir den Pfad unseres Ordners auf der DiskStation ausfüllen. In meinem Beispiel ist dies /volume1/docker/iobroker-data. Hinweis Wenn du in deiner DiskStation mehrere Volumes eingerichtet hast und dir sich nicht sicher bist, ob dein Verzeichnis auch unter /volume1 liegt, kannst du den Pfad auch aus den Eigenschaften des Ordners (Rechtsklick \u003e Eigenschaften) in der File Station kopieren. In der Registerkarte “Network” wählen wir als Netzwerk host. Die Angabe eines Hostnamen können wir uns sparen, da durch die verwendete Netzwerkoption automatisch der Hostname der DiskStation verwendet wird. Für den Fall dass du hier ein bereits vorbereitetes MACVLAN oder Bridge Netzwerk auswählst empfiehlt sich die Angabe eines Hostnamens, da dieser in ioBroker auch für die Instanz verwendet wird. Weiter geht es in der Registerkarte ENV. Hier haben wir die Möglichkeit Konfigurationsoptionen (Umgebungsvariablen) für unseren ioBroker Docker Container hinzuzufügen. Eine Lister der verfügbaren Optionen findest du in der Dokumentation zum ioBroker Docker Image. Exemplarisch habe ich hier einmal die Umgebungsvariable PACKAGES hinzugefügt und mit dem Wert nano belegt. Diese sorgt nun dafür, dass beim Start des Containers das Paket nano, welches nicht im Docker Image enthalten ist, installiert wird. Diese Option ist vor allem für ioBroker Adapter interessant, die zusätzliche Pakete erfordern. Infos dazu, welche Pakete ggf. benötigt werden, findest du in der jeweiligen Adapterdokumentation. Weiter geht es in der Registerkarte “Restart policy”. Hier wählen wir zu guter Letzt die Option Always. Diese sorgt dafür, dass der Container im Fehlerfall automatisch neu gestartet wird. Damit haben wir alle notwendigen Konfigurationen getätigt und können mit einem Klick auf “Deploy the container” oberhalb der “Advanced container settings” die Erstellung anstossen. Hinweis Die Erstellung des Containers kann mitunter ein wenig Zeit in Anspruch nehmen, da Portainer im Hintergrund zunächst das ioBroker Docker Image herunter laden muss. Hab einfach ein wenig Geduld. Solange keine Fehlermeldung erscheint ist alles in Ordnung. Im Anschluss landen wir wieder in der Container Übersicht (“Container list”). Hier sollte nun unser iobroker auftauchen. Ein Klick auf das erste Symbol in der Spalte “Quick Actions” öffnet die Logausgabe. Hier können wir den Startvorgang des Containers beobachten. Die Ausgabe sollte in etwa so aussehen. -------------------------------------------------------------------------------- ------------------------- 2023-03-28 21:19:46 ------------------------- -------------------------------------------------------------------------------- ----- ----- ----- ██╗ ██████╗ ██████╗ ██████╗ ██████╗ ██╗ ██╗ ███████╗ ██████╗ ----- ----- ██║ ██╔═══██","date":"27.02.2023","objectID":"/posts/2023/02/27_iobroker_unter_docker_auf_der_synology_diskstation/:4:0","tags":[],"title":"ioBroker unter Docker auf der Synology DiskStation","uri":"/posts/2023/02/27_iobroker_unter_docker_auf_der_synology_diskstation/"},{"categories":["Tutorials","ioBroker","DiskStation"],"content":"Bonus: Container mit Portainer Stacks erstellen Zum Verwenden von Stacks in Portainer habe ich ja bereits ein Tutorial gemacht. Als Stackfile würde das Beispiel von oben dann so aussehen: version: \"3\" services: iobroker: container_name: iobroker image: buanet/iobroker:latest network_mode: host restart: always environment: - PACKAGES=nano volumes: - /volume1/docker/iobroker-data:/opt/iobroker Für Fragen und Feedback nutze gerne die Kommentarfunktion zu diesem Beitrag. MfG, André ","date":"27.02.2023","objectID":"/posts/2023/02/27_iobroker_unter_docker_auf_der_synology_diskstation/:5:0","tags":[],"title":"ioBroker unter Docker auf der Synology DiskStation","uri":"/posts/2023/02/27_iobroker_unter_docker_auf_der_synology_diskstation/"},{"categories":["Docker Images","ioBroker"],"content":"Ein Überblick über die ioBroker Smarthome Software und das ioBroker Docker Image.","date":"26.02.2023","objectID":"/posts/2023/02/26_iobroker_im_smarthome_mit_docker/","tags":[],"title":"ioBroker im Smarthome mit Docker","uri":"/posts/2023/02/26_iobroker_im_smarthome_mit_docker/"},{"categories":["Docker Images","ioBroker"],"content":"Einleitung Eine zentrale Rolle in meinem Smarthome mit Docker spielt ioBroker. In diesem Artikel will ich dir einen kurzen Überblick über ioBroker geben und zeigen, wie einfach und schnell du einen ioBroker Docker Container für einen ersten Test aufsetzen kannst. ","date":"26.02.2023","objectID":"/posts/2023/02/26_iobroker_im_smarthome_mit_docker/:1:0","tags":[],"title":"ioBroker im Smarthome mit Docker","uri":"/posts/2023/02/26_iobroker_im_smarthome_mit_docker/"},{"categories":["Docker Images","ioBroker"],"content":"Was ist ioBroker? IoBroker ist eine in JavaScript geschriebene Open-Source-IoT-Plattform die Smarthome-Komponenten und Services verschiedener Hersteller verbindet. Mit Hilfe von Plugins (genannt: “Adapter”) ist ioBroker in der Lage mit einer Vielzahl von IoT-Hardware und -Diensten über verschiedene Protokolle und APIs zu kommunizieren. Alle Daten werden in einer zentralen Datenbank gespeichert auf die alle Adapter zugreifen können. Damit ist es sehr einfach logische Verbindungen, Automatisierungsskripte und schöne Visualisierungen herstellerübergreifend aufzubauen. Weitere Informationen zu ioBroker findest du unter iobroker.net. ","date":"26.02.2023","objectID":"/posts/2023/02/26_iobroker_im_smarthome_mit_docker/:2:0","tags":[],"title":"ioBroker im Smarthome mit Docker","uri":"/posts/2023/02/26_iobroker_im_smarthome_mit_docker/"},{"categories":["Docker Images","ioBroker"],"content":"Was ist das ioBroker Docker Image IoBroker ist nicht speziell für den Betrieb unter Docker entwickelt worden. Daher habe ich bereits 2017 damit begonnen ioBroker in ein Docker Image zu portieren. Seitdem hat sich das Projekt stetig weiter entwickelt und trägt mittlerweile auch den Titel “Offizielles ioBroker Docker Image”. Weitere Informationen zum ioBroker Docker Image findest du auf meiner Docs-Webseite. ","date":"26.02.2023","objectID":"/posts/2023/02/26_iobroker_im_smarthome_mit_docker/:3:0","tags":[],"title":"ioBroker im Smarthome mit Docker","uri":"/posts/2023/02/26_iobroker_im_smarthome_mit_docker/"},{"categories":["Docker Images","ioBroker"],"content":"Wo finde ich weitere Infos? Bevor wir loslegen hier noch einen kleine Liste mit Links zu weiterführenden Informationen, Bezugsquellen und Dokumentationen: Informationen zu ioBroker Offizielle ioBroker Dokumentation Informationen zum ioBroker Docker Image Offizielle ioBroker Docker Image Dokumentation IoBroker Docker Image Source Code \u0026 Issues IoBroker Docker Image im Docker Hub IoBroker Communities: Forum, Discord, Facebook ","date":"26.02.2023","objectID":"/posts/2023/02/26_iobroker_im_smarthome_mit_docker/:4:0","tags":[],"title":"ioBroker im Smarthome mit Docker","uri":"/posts/2023/02/26_iobroker_im_smarthome_mit_docker/"},{"categories":["Docker Images","ioBroker"],"content":"ioBroker Docker Container erstellen Im folgenden zeige ich dir, wie du schnell und einfach einen ioBroker Docker Container für einen ersten Test unter Docker erstellst und worauf du achten musst. Diese Anleitung ist unter Docker allgemein gültig und eignet sich besonders, wenn du schon Erfahrungen mit Docker gesammelt hast. ","date":"26.02.2023","objectID":"/posts/2023/02/26_iobroker_im_smarthome_mit_docker/:5:0","tags":[],"title":"ioBroker im Smarthome mit Docker","uri":"/posts/2023/02/26_iobroker_im_smarthome_mit_docker/"},{"categories":["Docker Images","ioBroker"],"content":"Voraussetzungen Folgendes setze ich voraus: Linux basierter Docker Host (NAS Systeme basieren in der Regel auf Linux) Zugriff auf die Kommandozeile des Docker Hosts Installierter und gestarteter Docker Dienst Internetzugang für den Docker Host ","date":"26.02.2023","objectID":"/posts/2023/02/26_iobroker_im_smarthome_mit_docker/:5:1","tags":[],"title":"ioBroker im Smarthome mit Docker","uri":"/posts/2023/02/26_iobroker_im_smarthome_mit_docker/"},{"categories":["Docker Images","ioBroker"],"content":"Persistente Datenspeicherung Kurz ein paar Worte zur persistenten Speicherung von Konfigurationsdaten. Der ioBroker im Docker Container speichert alle Konfigurationsdaten unter /opt/iobroker. Damit diese Daten beim Löschen des Containers nicht verloren gehen, legt das Docker Image (ab v8.0.0) beim Erstellen des Containers automatisch ein Standard-Docker-Volume an. Dieses Verhalten kannst du überschreiben indem du ein eigenes Volume oder einen Dateipfad an den Pfad /opt/iobroker in den Container mountest. Möchtest du ein Docker Volume nutzen, solltest du es vor dem Start des Container bereits via docker volume create [dein_volume_name] erstellt haben. Beim Start des Containers mountest du dein Volume oder Verzeichnis dann mit dieser Option: -v [dein_volume_oder_verzeichnis]:/opt/iobroker In docker-compose sieht das Ganze dann so aus: volumes: - [dein_volume_oder_verzeichnis]:/opt/iobroker ","date":"26.02.2023","objectID":"/posts/2023/02/26_iobroker_im_smarthome_mit_docker/:5:2","tags":[],"title":"ioBroker im Smarthome mit Docker","uri":"/posts/2023/02/26_iobroker_im_smarthome_mit_docker/"},{"categories":["Docker Images","ioBroker"],"content":"Per Kommandozeile erstellen Mit dem folgenden Kommando können wir einen einfachen ioBroker Docker Container erstellen. Ich verzichte dabei auf die Angabe eines Volumes oder Dateipfads für das Verzeichnis /opt/iobrokerund lasse von Docker ein Standard Volume anlegen. docker run -d -p 8081:8081 \\ --name iobroker --hostname iobroker --restart=always \\ buanet/iobroker:latest Der Befehl setzt sich dabei aus folgenden Parametern zusammen: docker run « zum Erstellen eines neuen Containers -d « für “detached” -p 8081:8081 « Port für den Zugriff auf die Web UI --name iobroker « Container Name --hostname iobroker « Container Hostname (auch Instanzname innerhalb von ioBroker) --restart=always « Restart Policy buanet/iobroker:latest « Verwendetes Image und Tag Hinweis Dies ist ein einfaches Beispiel zum Starten eines ioBroker Docker Containers. Sehr wahrscheinlich sind weitere Parameter, Ports und Variablen hinzuzufügen, damit der Container später auch produktiv genutzt werden kann. Insbesondere bei der Wahl und Konfiguration des Netzwerks gibt es Einiges zu beachten. Weitere Details zur Konfiguration des Containers findest du in der offiziellen Doku. Nachdem der Container angelegt ist, lassen wir uns mit dem Befehl docker logs --follow iobroker das Log anzeigen, um den Startprozess verfolgen zu können. $ docker logs --follow iobroker -------------------------------------------------------------------------------- ------------------------- 2023-03-17 21:40:55 ------------------------- -------------------------------------------------------------------------------- ----- ----- ----- ██╗ ██████╗ ██████╗ ██████╗ ██████╗ ██╗ ██╗ ███████╗ ██████╗ ----- ----- ██║ ██╔═══██╗ ██╔══██╗ ██╔══██╗ ██╔═══██╗ ██║ ██╔╝ ██╔════╝ ██╔══██╗ ----- ----- ██║ ██║ ██║ ██████╔╝ ██████╔╝ ██║ ██║ █████╔╝ █████╗ ██████╔╝ ----- ----- ██║ ██║ ██║ ██╔══██╗ ██╔══██╗ ██║ ██║ ██╔═██╗ ██╔══╝ ██╔══██╗ ----- ----- ██║ ╚██████╔╝ ██████╔╝ ██║ ██║ ╚██████╔╝ ██║ ██╗ ███████╗ ██║ ██║ ----- ----- ╚═╝ ╚═════╝ ╚═════╝ ╚═╝ ╚═╝ ╚═════╝ ╚═╝ ╚═╝ ╚══════╝ ╚═╝ ╚═╝ ----- ----- ----- ----- Welcome to your ioBroker Docker container! ----- ----- Startupscript is now running! ----- ----- Please be patient! ----- -------------------------------------------------------------------------------- -------------------------------------------------------------------------------- ----- System Information ----- ----- arch: x86_64 ----- ----- hostname: iobroker ----- ----- ----- ----- Version Information ----- ----- image: v8.0.0 ----- ----- build: 2023-02-20T17:21:59+00:00 ----- ----- node: v18.14.1 ----- ----- npm: 9.3.1 ----- ----- ----- ----- Environment Variables ----- ----- SETGID: 1000 ----- ----- SETUID: 1000 ----- -------------------------------------------------------------------------------- -------------------------------------------------------------------------------- ----- Step 1 of 5: Preparing container ----- -------------------------------------------------------------------------------- Updating Linux packages on first run... Done. Registering maintenance script as command... Done. -------------------------------------------------------------------------------- ----- Step 2 of 5: Detecting ioBroker installation ----- -------------------------------------------------------------------------------- Existing installation of ioBroker detected in \"/opt/iobroker\". -------------------------------------------------------------------------------- ----- Step 3 of 5: Checking ioBroker installation ----- -------------------------------------------------------------------------------- (Re)setting permissions (This might take a while! Please be patient!)... Done. Fixing \"sudo-bug\" by replacing sudo with gosu... Done. Initializing a fresh installation of ioBroker... Done. Hostname in ioBroker does not match the hostname of this container. Updating hostname to \"iobroker\"... The host for instance \"system.adapter.admin.0\" was changed from \"buildkitsandbox\" to \"iobroker\". The host for instance \"system.ad","date":"26.02.2023","objectID":"/posts/2023/02/26_iobroker_im_smarthome_mit_docker/:5:3","tags":[],"title":"ioBroker im Smarthome mit Docker","uri":"/posts/2023/02/26_iobroker_im_smarthome_mit_docker/"},{"categories":["Docker Images","ioBroker"],"content":"Bonus I: Mit Portainer erstellen Als kleine Zugabe zeige ich dir jetzt noch, wie du den oben bereits erstellten, einfachen ioBroker Container über die Portainer Weboberfläche erstellen kannst. Dazu öffnen wir die Portainer Weboberfläche und rufen den Menüpunkt “Containers” auf. Über den Button “+ Add container” gelangen wir in die Oberfläche zur Erstellung eines neuen Containers. Wir vergeben einen Namen, in meinem Fall iobroker und tragen unter “Image” das Image + Tag ein, welches wir verwenden wollen. Analog zum obigen Beispiel ist dies buanet/iobroker:latest. Da wir den ioBroker Docker Container mit dem Standardnetzwerk Bridge starten werden, müssen wir unter “Network ports configuration” mit dem Button “+ publish a new network port” eine neue Portfreigabe für den ioBroker Admin Port 8081 erstellen. Wir reichen den Port 1:1 durch und füllen daher die Felder für host und port mit den identischen Werten. Weiter geht es mit den “Advanced container settings”. unter dem Punkt “Volumes” hätten wir die Möglichkeit unser eigenes Volume oder Verzeichnis für den ioBroker zu mounten. Analog zum obigen Beispiel verzichte ich allerdings darauf und lasse das Volume von Docker automatisch anlegen. Im Bereich “Network” überprüfen wir die Auswahl von bridge im Feld “Network”. Direkt darunter können wir den “Hostname” festlegen. Wie oben nutzen wir hier iobroker. Bleibt noch die Einstellung für die “Restart policy”, welche dafür sorgt, dass unser Container automatisch neu startet, wenn es ein Problem gibt. Die Einstellung finden wir um gleichnamigen Bereich. Wir wählen hier always. Das war es auch schon. Mit einem Klick auf den Button “Deploy the container” startet die Erstellung. Hier kann es jetzt mitunter ein wenig dauern, da das Docker Image beim ersten Mal erst einmal herunter geladen werden muss. Nach Abschluss des Vorgangs landen wir automatisch in der Übersicht der “Containers”. Mit einem Klick auf den Namen können wir uns die Details anzeigen lassen. Auch einen Link zu “Logs” finden wir hier. Ab hier geht es dann wie im obigen Beispiel mit der Logausgabe weiter. ","date":"26.02.2023","objectID":"/posts/2023/02/26_iobroker_im_smarthome_mit_docker/:5:4","tags":[],"title":"ioBroker im Smarthome mit Docker","uri":"/posts/2023/02/26_iobroker_im_smarthome_mit_docker/"},{"categories":["Docker Images","ioBroker"],"content":"Bonus II: Mit Stacks unter Portainer erstellen Wenn dir das manuelle Anlegen des Docker Containers über die Portainer Weboberfläche zu umständlich ist, kannst du dein Ziel auch über die Stacks-Funktion von Portainer erreichen. Das Ganze funktioniert wie docker-compose, allerdings gestützt über die Portainer Weboberfläche inkl. Editor zum Bearbeiten des Stackfiles. Für die grundlegenden Instruktionen zum Verwenden von Stacks in Portainer empfehle ich dir, einen Blick in den verlinkten Artikel zu werfen. Das YAML-File für den einfachen ioBroker Docker Container (siehe oben) würde dabei so aussehen: version: \"3\" services: iobroker: container_name: iobroker image: buanet/iobroker:latest hostname: iobroker restart: always ports: - \"8081:8081\" Einen Stack kannst du in der Portainer Weboberfläche unter “Stacks” erstellen. Mit einem Klick auf “+Add stack” gelangst du in den Webeditor. Vergib einen Namen und kopiere das Stackfile in den Editor. Ein Klick auf “Deploy the stack” startet die Erstellung des bzw. der Docker Container die im Stackfile definiert worden sind. Im Anschluss gelangst du automatisch in die Übersicht des Stacks und kannst, wie oben beschrieben, mit einem Blick in das Log fortfahren. Ich hoffe ich konnte dir mit diesem Beitrag einen kleinen Überblick über ioBroker unter Docker geben. Für Fragen und Feedback nutze gerne die Kommentarfunktion zu diesem Beitrag. MfG, André ","date":"26.02.2023","objectID":"/posts/2023/02/26_iobroker_im_smarthome_mit_docker/:5:5","tags":[],"title":"ioBroker im Smarthome mit Docker","uri":"/posts/2023/02/26_iobroker_im_smarthome_mit_docker/"},{"categories":["Tutorials","Portainer"],"content":"Ein Tutorial zur Einrichtung eines Docker MACVLAN Netzwerks mit Portainer","date":"23.02.2023","objectID":"/posts/2023/02/23_einrichtung_eines_macvlan_netzwerks_mit_portainer/","tags":[],"title":"Einrichtung eines MACVLAN Netzwerks mit Portainer","uri":"/posts/2023/02/23_einrichtung_eines_macvlan_netzwerks_mit_portainer/"},{"categories":["Tutorials","Portainer"],"content":"Einleitung In machen Fällen benötigt ein Docker Container mehr Zugriff auf das heimische Netzwerk, als über ein Bridge Netzwerk möglich ist. Hier geht es zum Beispiel um Broadcast oder Multicast Traffic, der den Container über das Bridge Netzwerk schlicht nicht erreichen kann, aber von vielen Tools und Protokollen benötigt wird. In diesem Fall bietet sich die Verwendung eines MACVLAN Netzwerks an. Hierbei bekommt der Container eine eigene (virtuelle) IP-Adresse in deinem (Heim-)Netzwerk und ist damit von anderen Geräten vollständig erreichbar. Eine Freigabe einzelner Ports ist nicht mehr erforderlich. In diesem Tutorial zeige ich dir, wie du über Portainer ein MACVLAN Netzwerk erstellst und worauf du achten musst. Am Beispiel meines Testnetzes werden wir zusammen ein Subnetz für das MACVLAN finden und entsprechend konfigurieren. ","date":"23.02.2023","objectID":"/posts/2023/02/23_einrichtung_eines_macvlan_netzwerks_mit_portainer/:1:0","tags":[],"title":"Einrichtung eines MACVLAN Netzwerks mit Portainer","uri":"/posts/2023/02/23_einrichtung_eines_macvlan_netzwerks_mit_portainer/"},{"categories":["Tutorials","Portainer"],"content":"Voraussetzungen Auch dieses Mal gilt es wieder Voraussetzungen zu erfüllen um das Tutorial erfolgreich umsetzen zu können. Hier eine kurze Liste: Vorhandensein eines auf Linux basierenden Docker Hosts oder NAS mit Docker Portainer zur Verwaltung des Docker Dienstes Grundverständnis zum Thema IP-Netzwerk im Allgemeinen (IP-Adressen und Bereiche, Subnetze, DHCP, Gateway) Grundverständnis zum Thema Docker Netzwerk Kenntnisse des eigenen Netzwerks (DHCP-Bereiche, Gateways, usw.) Zugriff auf die Kommandozeile des Docker Hosts ","date":"23.02.2023","objectID":"/posts/2023/02/23_einrichtung_eines_macvlan_netzwerks_mit_portainer/:2:0","tags":[],"title":"Einrichtung eines MACVLAN Netzwerks mit Portainer","uri":"/posts/2023/02/23_einrichtung_eines_macvlan_netzwerks_mit_portainer/"},{"categories":["Tutorials","Portainer"],"content":"Adressbereich (IP range) ermitteln Starten wir mit dem Ermitteln eines passenden Adressbereichs für unser MACVLAN. Dazu muss man wissen, dass Docker, im für das MACVLAN verwendeten Adressbereich, selbst IP-Adressen für Container vergeben kann, wenn diese mit dem Netzwerk verbunden werden. Ganz ähnlich wie es auch ein DHCP-Server tut wenn sich ein neues Gerät im Netzwerk meldet. Um hier später IP-Adresskonflikte im Heimnetz zu vermeiden, sollte sich daher der Adressbereich für das MACVLAN nicht mit dem Adressbereich deines DHCP überschneiden. Nehmen wir mein Test-Netzwerk als praktisches Beispiel. Ich verwende das Netzwerk 192.168.11.0/24. Es umfasst einen Netzwerkbereich von 254 Adressen (192.168.11.1 bis 192.168.11.254). Das Gateway belegt die 192.168.11.1. Mein DHCP vergibt IP-Adressen im Bereich von 192.168.11.200 bis 192.168.11.250. Vergleichbar ist dieses Netz von der Beschaffenheit her zum Beispiel mit den Standard Netzwerken, die auch Heimnetz-Router wie die Fritzbox verwenden. Um nun innerhalb dieses Netzwerks einen passenden Adressbereich zu finden, welcher sich für das MACVLAN eignet, nutze ich immer wieder gerne den Netzwerkrechner von Heise. Dort gebe ich zunächst eine IP-Adresse aus dem Adressbereich ein, von dem ich denke, dass er sich für mein MACVLAN Netzwerk eignet und nicht mit dem DHCP kollidiert. In meinem Fall ist das zum Beispiel der Bereich um 192.168.11.120. Weiter geht es im Netzwerkrechner mit dem CIDR-Suffix (Definiert die Größe der Netzmaske). Für mein komplettes Test-Netzwerk ist das CIDR-Suffix /24 (255.255.255.0). Je größer das Suffix wird, desto kleiner wird mein Netzwerkbereich. Dabei halbiert sich mit jedem Schritt die Anzahl der nutzbaren IP-Adressen im Netzwerkbereich (-2 für Netzadresse und Broadcast). Bedeutet für die Größe der möglichen Adressbereiche: /24 = 254 nutzbare IP-Adressen im Bereich /25 = 126 nutzbare IP-Adressen im Bereich /26 = 62 nutzbare IP-Adressen im Bereich /27 = 30 nutzbare IP-Adressen im Bereich /28 = 14 nutzbare IP-Adressen im Bereich /29 = 6 nutzbare IP-Adressen im Bereich /30 = 2 nutzbare IP-Adressen im Bereich Mein Tip: Einfach mal verschiedene Werte im Rechner eingeben und schauen wie sich die Ergebnisse verändern. Info Kleine, ergänzende Info zum CIDR-Suffix und Spezialfall /31. Eigentlich wäre hier die Anzahl der nutzbaren Adressen = 0. Docker nutzt allerdings auch die “Netzadresse”, sodass wir das MACVLAN auch mit dem Suffix /31 definieren könnten. In diesem Fall wäre im Netz genau eine Adresse (nämlich die Netzadresse) für Container verfügbar. Da mir ein Adressbereich mit 6 IP-Adressen ausreicht, verwende ich das CIDR-Suffix /29und erhalte über den Rechner folgendes Ergebnis: Dieser Adressbereich umfasst nun insgesamt die IP-Adressen von 192.168.11..120 bis 192.168.11..127, während ich die Adressen von 192.168.11.121 bis 192.168.11.126 für Docker Container verwenden könnte. Hinweis Dieses Tutorial ersetzt keinen Netzwerkkurs. 🤓 Die Auswahl des Netzbereiches ist sehr oberflächlich gehalten, funktioniert aber für diesen Anwendungsfall (im einfachen Heimnetz). Für weiteren Infos hier ein Link zum Thema “IP-Adressen”. Außerdem findest du reichlich Videos zum Thema “Netzwerk/ Subnetting” bei Youtube. Damit haben wir unseren Adressbereich ermittelt und können die gewonnenen Informationen in unserer MACVLAN-Konfiguration verwenden. Jetzt kann es doch eigentlich los gehen oder? ","date":"23.02.2023","objectID":"/posts/2023/02/23_einrichtung_eines_macvlan_netzwerks_mit_portainer/:3:0","tags":[],"title":"Einrichtung eines MACVLAN Netzwerks mit Portainer","uri":"/posts/2023/02/23_einrichtung_eines_macvlan_netzwerks_mit_portainer/"},{"categories":["Tutorials","Portainer"],"content":"Parent network card ermitteln Fast. Um ein MACVLAN anlegen zu können, muss dieses an einen Netzwerkadapter im Docker Host gebunden werden. Damit wir dies bei der Konfiguration über die Portainer Web UI erledigen können, müssen wir zunächst die Bezeichnung des Adapters ermitteln, der mit unserem Heimnetz verbunden ist. Dies geht am einfachsten über die Kommandozeile. Über ifconfig oder ip addr show können wir uns eine Auflistung der Netzwerkkonfiguration anzeigen lassen. $ ifconfig docker0 Link encap:Ethernet HWaddr 02:42:32:39:3E:55 inet addr:172.17.0.1 Bcast:172.17.255.255 Mask:255.255.0.0 inet6 addr: fe80::42:32ff:fe39:3e55/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:2391 errors:0 dropped:0 overruns:0 frame:0 TX packets:2657 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:3308725 (3.1 MiB) TX bytes:872522 (852.0 KiB) docker-67 Link encap:Ethernet HWaddr 02:42:33:D2:74:92 inet addr:172.20.0.1 Bcast:172.20.255.255 Mask:255.255.0.0 UP BROADCAST MULTICAST MTU:1500 Metric:1 RX packets:0 errors:0 dropped:0 overruns:0 frame:0 TX packets:0 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:0 (0.0 B) TX bytes:0 (0.0 B) docker66f Link encap:Ethernet HWaddr 0E:1B:75:00:0A:ED inet6 addr: fe80::c1b:75ff:fe00:aed/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:2391 errors:0 dropped:0 overruns:0 frame:0 TX packets:2662 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:0 RX bytes:3342199 (3.1 MiB) TX bytes:872960 (852.5 KiB) eth0 Link encap:Ethernet HWaddr EE:10:EC:B0:CB:20 inet addr:192.168.11.200 Bcast:192.168.11.255 Mask:255.255.255.0 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:10802 errors:0 dropped:0 overruns:0 frame:0 TX packets:6910 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:2018717 (1.9 MiB) TX bytes:15025239 (14.3 MiB) lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:68 errors:0 dropped:0 overruns:0 frame:0 TX packets:68 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1 RX bytes:7279 (7.1 KiB) TX bytes:7279 (7.1 KiB) $ ip addr show 1: lo: \u003cLOOPBACK,UP,LOWER_UP\u003e mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: eth0: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether ee:10:ec:b0:cb:20 brd ff:ff:ff:ff:ff:ff inet 192.168.11.200/24 brd 192.168.11.255 scope global eth0 valid_lft forever preferred_lft forever 3: sit0@NONE: \u003cNOARP\u003e mtu 1480 qdisc noop state DOWN group default qlen 1 link/sit 0.0.0.0 brd 0.0.0.0 4: docker0: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc noqueue state UP group default qlen 1000 link/ether 02:42:32:39:3e:55 brd ff:ff:ff:ff:ff:ff inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0 valid_lft forever preferred_lft forever inet6 fe80::42:32ff:fe39:3e55/64 scope link valid_lft forever preferred_lft forever 5: docker-6735f2dd: \u003cNO-CARRIER,BROADCAST,MULTICAST,UP\u003e mtu 1500 qdisc noqueue state DOWN group default qlen 1000 link/ether 02:42:33:d2:74:92 brd ff:ff:ff:ff:ff:ff inet 172.20.0.1/16 brd 172.20.255.255 scope global docker-6735f2dd valid_lft forever preferred_lft forever 7: docker66fe1a9@if6: \u003cBROADCAST,MULTICAST,UP,LOWER_UP\u003e mtu 1500 qdisc noqueue master docker0 state UP group default link/ether 0e:1b:75:00:0a:ed brd ff:ff:ff:ff:ff:ff link-netnsid 0 inet6 fe80::c1b:75ff:fe00:aed/64 scope link valid_lft forever preferred_lft forever In beiden Ausgaben finde ich die IP-Adresse meines Docker Hosts (192.168.11.200) innerhalb meines Netzwerks. Zugewiesen ist diese dem Netzwerkinterface eth0. Mit dieser Info im Gepäck können wir nun mit dem Anlegen des MACVLAN beginnen. ","date":"23.02.2023","objectID":"/posts/2023/02/23_einrichtung_eines_macvlan_netzwerks_mit_portainer/:4:0","tags":[],"title":"Einrichtung eines MACVLAN Netzwerks mit Portainer","uri":"/posts/2023/02/23_einrichtung_eines_macvlan_netzwerks_mit_portainer/"},{"categories":["Tutorials","Portainer"],"content":"MACVLAN über UI anlegen Das Anlegen eines MACVLAN über Portainer erfolgt in zwei Schritten. Zunächst müssen wir eine MACVLAN “Configuration” anlegen, bevor wir in einem weiteren Schritt daraus eine MACVLAN “Creation” erstellen können. Fangen wir also mit der “Configuration” an. ","date":"23.02.2023","objectID":"/posts/2023/02/23_einrichtung_eines_macvlan_netzwerks_mit_portainer/:5:0","tags":[],"title":"Einrichtung eines MACVLAN Netzwerks mit Portainer","uri":"/posts/2023/02/23_einrichtung_eines_macvlan_netzwerks_mit_portainer/"},{"categories":["Tutorials","Portainer"],"content":"“Configuration” erstellen Los geht es natürlich wieder im Bereich “Networks” in der Portainer Weboberfläche mit einem Klick auf “+ Add network”. Wir vergeben einen aussagekräftigen Namen, in meinem Fall wähle ich my_macvlan_conf. Als Driver wählen wir macvlan. An dieser Stelle erscheint dann auch der Hinweis auf “Configuration” und “Creation”. Wir wählen den Button für “Contiguration”. Unter “Parent network card” geben wir das ermittelte Netzwerkinterface eth0 an, an das wir unser MACVLAN binden wollen. Die “IPv4 Network configuration” füllen wir mit den Daten zu unserem Subnetz (Heimnetzwerk) und dem ausgewählten Adressbereich aus. In meinem Fall ist das das Subnetz 192.168.11.0/24. Das Gateway (mein Router) darin hat die 192.168.0.1. Als IP-Adressbereich habe ich 192.168.11.120/29ermittelt. Weitere Optionen müssen wir in diesem Fall nicht konfigurieren. Tip Sollte sich im ausgewählten Adressbereich bereits ein Netzwerkgerät befinden, also eine oder mehrere Adressen nicht mehr verfügbar sein, so kannst du bei der Erstellung über “+ Add exclude IP” Adressen definieren, die Docker aus dem Bereich nicht verwenden darf. Ein Klick auf “Create the network” erstellt die Konfiguration für unser neues MACVLAN Netzwerk. ","date":"23.02.2023","objectID":"/posts/2023/02/23_einrichtung_eines_macvlan_netzwerks_mit_portainer/:5:1","tags":[],"title":"Einrichtung eines MACVLAN Netzwerks mit Portainer","uri":"/posts/2023/02/23_einrichtung_eines_macvlan_netzwerks_mit_portainer/"},{"categories":["Tutorials","Portainer"],"content":"“Creation” erstellen Wir befinden uns wieder im Bereich “Networks” des Portainer Web interfaces. Um die “Creation” zu erstellen, klicken wir nochmals auf “+ Add network”. Wir vergeben einen aussagekräftigen Namen für die Creation, in meinem Fall wähle ich my_macvlan. Als Driver wählen wir wieder macvlan. Anders als zuvor wählen wir nun aber den Button “Creation”. Aus dem Dropdown “Configuration” wählen wir unsere Configuration. In meinem Fall my_macvlan_conf. Weitere Einstellungen müssen wir nicht konfigurieren. Ein Klick auf “Create the network” erstellt unser MACVLAN. ","date":"23.02.2023","objectID":"/posts/2023/02/23_einrichtung_eines_macvlan_netzwerks_mit_portainer/:5:2","tags":[],"title":"Einrichtung eines MACVLAN Netzwerks mit Portainer","uri":"/posts/2023/02/23_einrichtung_eines_macvlan_netzwerks_mit_portainer/"},{"categories":["Tutorials","Portainer"],"content":"MACVLAN über stack/ docker-compose definieren Natürlich lässt sich ein MACVLAN auch in docker-compose definieren. In der Portainer Web UI nennt sich das Ganze “Stacks”. Die Definition des oben manuell angelegten MACVLAN Netzwerks sieht dabei so aus: networks: my_macvlan: driver: macvlan driver_opts: parent: eth0 ipam: config: - subnet: 192.168.11.0/24 gateway: 192.168.11.1 ip_range: 192.168.11.120/29 ","date":"23.02.2023","objectID":"/posts/2023/02/23_einrichtung_eines_macvlan_netzwerks_mit_portainer/:6:0","tags":[],"title":"Einrichtung eines MACVLAN Netzwerks mit Portainer","uri":"/posts/2023/02/23_einrichtung_eines_macvlan_netzwerks_mit_portainer/"},{"categories":["Tutorials","Portainer"],"content":"Bonus: MACVLAN über die Konsole anlegen Das MACVLAN kann selbstverständlich auch über die Kommandozeile des Docker Hosts angelegt werden. Dafür benötigen wir einen entsprechenden Zugang per SSH oder direkt auf die Konsole des Systems. Mit einem docker network ls (je nach Systemkonfiguration sind ggf. erweiterte Rechte über sudo erforderlich), lassen wir uns eine Liste der bereits vorhandenen Netzwerke anzeigen. $ docker network ls NETWORK ID NAME DRIVER SCOPE 9335f6cb157e bridge bridge local 62d546b7d844 host host local 6735f2dd8b6d my_bridge bridge local 8b720f638bc1 none null local Um ein MACVLAN Netzwerk wie oben beschrieben zu erstellen, reicht ein einziges Kommando in dem wir alle nötigen Parameter einfach mitgeben. docker network create -d macvlan \\ --subnet=192.168.11.0/24 \\ --ip-range=192.168.11.120/29 \\ --gateway=192.168.11.1 \\ -o parent=eth0 my_macvlan Die Details zum Netzwerk lassen sich anschließend per docker network inspect my_macvlan auslesen. $ docker network inspect my_macvlan [ { \"Name\": \"my_macvlan\", \"Id\": \"77dc5f025355da453a3e6a781700bda078bdef596637a415344db99e578df56b\", \"Created\": \"2023-03-13T14:54:21.688669799+01:00\", \"Scope\": \"local\", \"Driver\": \"macvlan\", \"EnableIPv6\": false, \"IPAM\": { \"Driver\": \"default\", \"Options\": {}, \"Config\": [ { \"Subnet\": \"192.168.11.0/24\", \"IPRange\": \"192.168.11.120/29\", \"Gateway\": \"192.168.11.1\" } ] }, \"Internal\": false, \"Attachable\": false, \"Ingress\": false, \"ConfigFrom\": { \"Network\": \"\" }, \"ConfigOnly\": false, \"Containers\": {}, \"Options\": { \"parent\": \"eth0\" }, \"Labels\": {} } ] Das soll es zur Kommandozeile auch gewesen sein. In den Docker Docs zu docker network create findest du weiterführende Informationen und Beispiele. Ich hoffe ich konnte dir mit diesem Beitrag einen kleinen Überblick über die Einrichtung eines Docker MACVLAN Netzwerks mit Portainer geben. Für Fragen und Feedback nutze gerne die Kommentarfunktion zu diesem Beitrag. MfG, André ","date":"23.02.2023","objectID":"/posts/2023/02/23_einrichtung_eines_macvlan_netzwerks_mit_portainer/:7:0","tags":[],"title":"Einrichtung eines MACVLAN Netzwerks mit Portainer","uri":"/posts/2023/02/23_einrichtung_eines_macvlan_netzwerks_mit_portainer/"},{"categories":["Tutorials","Portainer"],"content":"Ein Tutorial zur Einrichtung eines benutzerdefinierten Docker Bridge Netzwerks mit Portainer","date":"23.02.2023","objectID":"/posts/2023/02/23_einrichtung_eines_benutzerdefinierten_bridge_netzwerks_mit_portainer/","tags":[],"title":"Einrichtung eines benutzerdefinierten Bridge Netzwerks mit Portainer","uri":"/posts/2023/02/23_einrichtung_eines_benutzerdefinierten_bridge_netzwerks_mit_portainer/"},{"categories":["Tutorials","Portainer"],"content":"Einleitung Wer mehrere Docker Container über das Standard-Netzwerk “bridge” verbindet, wird wohl früher oder später darüber stolpern: Im Standard-Bridge-Netzwerk von Docker gibt es unter anderem nicht nur keine Namensauflösung (DNS) sondern auch keine Möglichkeit den Containern feste IP-Adressen im virtuellen Netz zu vergeben (alle Einschränkungen zum Nachlesen in den Docker Docs). Doch es gibt eine Lösung. Legt man sich nämlich sein eigenes Bridge-Netzwerk an umgeht man die Beschränkungen. Wie man ein benutzerdefiniertes Bridge Netzwerk über Portainer anlegt, das zeige ich dir in diesem Tutorial. ","date":"23.02.2023","objectID":"/posts/2023/02/23_einrichtung_eines_benutzerdefinierten_bridge_netzwerks_mit_portainer/:1:0","tags":[],"title":"Einrichtung eines benutzerdefinierten Bridge Netzwerks mit Portainer","uri":"/posts/2023/02/23_einrichtung_eines_benutzerdefinierten_bridge_netzwerks_mit_portainer/"},{"categories":["Tutorials","Portainer"],"content":"Voraussetzungen Selbstverständlich gibt es auch hier ein paar Voraussetzungen die du schon erfüllt haben solltest. Hier eine kurze Liste: Vorhandensein eines auf Linux basierenden Docker Hosts oder NAS mit Docker Portainer zur Verwaltung des Docker Dienstes Grundverständnis zum Thema (Docker) Netzwerk optional: Zugriff auf die Kommandozeile des Docker Hosts (nur für Bonus) ","date":"23.02.2023","objectID":"/posts/2023/02/23_einrichtung_eines_benutzerdefinierten_bridge_netzwerks_mit_portainer/:2:0","tags":[],"title":"Einrichtung eines benutzerdefinierten Bridge Netzwerks mit Portainer","uri":"/posts/2023/02/23_einrichtung_eines_benutzerdefinierten_bridge_netzwerks_mit_portainer/"},{"categories":["Tutorials","Portainer"],"content":"Bridge Netzwerk über Portainer anlegen Erste Anlaufstelle für Docker Netzwerke ist der Menüpunkt “networks” in der Portainer Weboberfläche. Hier sehen wir eine Übersicht über die bisher angelegten Docker Netzwerke. In meinem Fall sind das lediglich die Docker Standardkonfigurationen für “bridge”, “host” und “none”. Über den Button “+ Add network” können wir nun ein neues Netzwerk definieren. Zunächst vergeben wir einen aussagekräftigen Namen. In meinem Fall nenne ich das Netzwerk “my_bridge”. Im Feld “Driver” wählen wir “bridge”, denn wir wollen ja ein benutzerdefiniertes Bridge Netzwerk erstellen. Nun müssen wir die IPv4 bzw. IPv6 Konfiguration für unser Netzwerk festlegen. Da mir für meinen Anwendungszweck IPv4 ausreicht, konfiguriere ich lediglich die IPv4 Optionen. Analog zum Subnetz des Docker Default Bridge Netzwerks wähle ich für mein Netzwerk das Subnetz 172.20.0.0/16 und lege das Gateway auf 172.20.0.1 fest. Für die “IP range” (den Adressbereich) wähle ich 172.20.0.0/24. Dies beschränkt die IP-Adressen meines Netzes auf den Bereich von 172.20.0.1 bis 172.20.0.254. Info Da dieses Tutorial kein Netzwerkkurs sein soll, gehe ich nicht weiter darauf ein, warum ich den IP-Adressbereich so gewählt habe. Hier aber ein nützlicher Link zum Thema “IP-Adressen” sowie zum Netzwerkrechner von Heise. Außerdem findest du reichlich Videos zum Thema “Netzwerk/ Subnetting” bei Youtube. Die weiteren Optionen unter “Advanced configuration” benötigen wir nicht. Mit einem Klick auf “Create the network” wird das Netzwerk erstellt und erscheint in unserer Netzwerkliste: ","date":"23.02.2023","objectID":"/posts/2023/02/23_einrichtung_eines_benutzerdefinierten_bridge_netzwerks_mit_portainer/:3:0","tags":[],"title":"Einrichtung eines benutzerdefinierten Bridge Netzwerks mit Portainer","uri":"/posts/2023/02/23_einrichtung_eines_benutzerdefinierten_bridge_netzwerks_mit_portainer/"},{"categories":["Tutorials","Portainer"],"content":"Bridge Netzwerk über stack/ docker-compose definieren Natürlich lässt sich solch ein benutzerdefiniertes Netzwerk auch in docker-compose definieren. In der Portainer Web UI nennt sich das Ganze “Stacks”. Die Definition des oben manuell angelegten Netzwerks sieht dabei so aus: networks: my_bridge: driver: bridge ipam: config: - subnet: 172.20.0.0/16 gateway: 172.20.0.1 ip_range: 172.20.0.0/24 ","date":"23.02.2023","objectID":"/posts/2023/02/23_einrichtung_eines_benutzerdefinierten_bridge_netzwerks_mit_portainer/:4:0","tags":[],"title":"Einrichtung eines benutzerdefinierten Bridge Netzwerks mit Portainer","uri":"/posts/2023/02/23_einrichtung_eines_benutzerdefinierten_bridge_netzwerks_mit_portainer/"},{"categories":["Tutorials","Portainer"],"content":"Bonus: Bridge Netzwerk über die Konsole anlegen Selbstverständlich können wir Netzwerke auch über die Kommandozeile unseres Docker Hosts anlegen. Dafür benötigen wir einen entsprechenden Zugang per SSH oder direkt auf die Konsole des Systems. Mit einem docker network ls (je nach Systemkonfiguration sind ggf. erweiterte Rechte über sudo erforderlich), lassen wir uns eine Liste der bereits vorhandenen Netzwerke anzeigen. $ docker network ls NETWORK ID NAME DRIVER SCOPE 9335f6cb157e bridge bridge local 62d546b7d844 host host local 6735f2dd8b6d my_bridge bridge local 8b720f638bc1 none null local Details zu unserem bereits über Portainer erstellten Netzwerks my_bridge können wir per docker network inspect my_bridge anzeigen lassen. $ docker network inspect my_bridge [ { \"Name\": \"my_bridge\", \"Id\": \"6735f2dd8b6d27fab59382cf919b1a88e1eeeff6bcc24517074277329886a106\", \"Created\": \"2023-03-12T21:11:52.358474863+01:00\", \"Scope\": \"local\", \"Driver\": \"bridge\", \"EnableIPv6\": false, \"IPAM\": { \"Driver\": \"default\", \"Options\": null, \"Config\": [ { \"Subnet\": \"172.20.0.0/16\", \"IPRange\": \"172.20.0.0/24\", \"Gateway\": \"172.20.0.1\" } ] }, \"Internal\": false, \"Attachable\": false, \"Ingress\": false, \"ConfigFrom\": { \"Network\": \"\" }, \"ConfigOnly\": false, \"Containers\": {}, \"Options\": {}, \"Labels\": {} } ] Ein einfaches, benutzerdefiniertes Bridge Netzwerk können wir jetzt einfach per docker network create [Netzwerkname] erstellen. Dabei wählt Docker die Parameter für Subnet, Gateway und Adressbereich (IP range) selbst. docker network create my_other_bridge $ docker network ls NETWORK ID NAME DRIVER SCOPE 9335f6cb157e bridge bridge local 62d546b7d844 host host local 6735f2dd8b6d my_bridge bridge local e0f4f0715651 my_other_bridge bridge local 8b720f638bc1 none null local $ docker network inspect my_other_bridge [ { \"Name\": \"my_other_bridge\", \"Id\": \"e0f4f071565141986e111a0b511149e7361c79ed78f6e80e8abd6ce7d91aef20\", \"Created\": \"2023-03-13T08:59:53.863603535+01:00\", \"Scope\": \"local\", \"Driver\": \"bridge\", \"EnableIPv6\": false, \"IPAM\": { \"Driver\": \"default\", \"Options\": {}, \"Config\": [ { \"Subnet\": \"172.21.0.0/16\", \"Gateway\": \"172.21.0.1\" } ] }, \"Internal\": false, \"Attachable\": false, \"Ingress\": false, \"ConfigFrom\": { \"Network\": \"\" }, \"ConfigOnly\": false, \"Containers\": {}, \"Options\": {}, \"Labels\": {} } ] Natürlich können wir die Parameter auch selbst mit geben. Hier ein Beispiel zum Erstellen unsere my_bridge-Netzwerks von oben: docker network create \\ --subnet=172.20.0.0/16 \\ --ip-range=172.20.0.0/24 \\ --gateway=172.20.0.1 my_bridge Das soll es zur Kommandozeile auch gewesen sein. In den Docker Docs zu docker network create findest du weiterführende Informationen und Beispiele. Ich hoffe ich konnte dir mit diesem Beitrag einen kleinen Überblick über die Einrichtung eines benutzerdefinierten Docker Bridge Netzwerks mit Portainer geben. Für Fragen und Feedback nutze gerne die Kommentarfunktion zu diesem Beitrag. MfG, André ","date":"23.02.2023","objectID":"/posts/2023/02/23_einrichtung_eines_benutzerdefinierten_bridge_netzwerks_mit_portainer/:5:0","tags":[],"title":"Einrichtung eines benutzerdefinierten Bridge Netzwerks mit Portainer","uri":"/posts/2023/02/23_einrichtung_eines_benutzerdefinierten_bridge_netzwerks_mit_portainer/"},{"categories":["Tutorials","Portainer"],"content":"Ein Tutorial zum Arbeiten mit Stacks (docker-compose) in Portainer","date":"15.02.2023","objectID":"/posts/2023/02/15_verwenden_von_stacks_in_portainer/","tags":[],"title":"Verwenden von Stacks (aka docker-compose) in Portainer","uri":"/posts/2023/02/15_verwenden_von_stacks_in_portainer/"},{"categories":["Tutorials","Portainer"],"content":"Einleitung Stacks nennt sich eine beliebte Funktion in Portainer, mit der es möglich ist über eine einzige “Konfigurationsdatei” (Stackfile) einen oder mehrere Container, samt Netzwerken und Volumes, erstellen und entsprechend konfigurieren zu lassen. Das Ganze basiert dabei auf “docker-compose”, ist aber durch die vollständige Integration in die Portainer Weboberfläche für den Durchschnittsuser deutlich komfortabler zu bedienen. In diesem Tutorial möchte ich dir ein paar Grundlagen zur Verwendung von Portainer Stacks vermitteln und dir damit, anhand eines Beispiels, ein Tool an die Hand geben, dass du sicher gut in deinem Smarthome mit Docker gebrauchen kannst. ","date":"15.02.2023","objectID":"/posts/2023/02/15_verwenden_von_stacks_in_portainer/:1:0","tags":[],"title":"Verwenden von Stacks (aka docker-compose) in Portainer","uri":"/posts/2023/02/15_verwenden_von_stacks_in_portainer/"},{"categories":["Tutorials","Portainer"],"content":"Voraussetzungen Fangen wir wie üblich mit den Voraussetzungen für dieses Tutorial an. Vorhandensein eines auf Linux basierenden Docker Hosts oder NAS mit Docker Portainer zur Verwaltung des Docker Dienstes Grundverständnis zum Thema Docker ","date":"15.02.2023","objectID":"/posts/2023/02/15_verwenden_von_stacks_in_portainer/:2:0","tags":[],"title":"Verwenden von Stacks (aka docker-compose) in Portainer","uri":"/posts/2023/02/15_verwenden_von_stacks_in_portainer/"},{"categories":["Tutorials","Portainer"],"content":"Grundlegende Funktionsweise Wie eingangs bereits erwähnt, bieten uns Stacks unter Portainer die Möglichkeit einen oder mehrere Container samt Netzwerken und Volumes in einer Konfigurationsdatei, dem Stackfile, zu definieren und anschließend durch den Docker Dienst, voll automatisiert, erstellen zu lassen. Das Stackfile wird dabei in YAML (Yet Another Markup Language) verfasst. YAML ist eine einfache Auszeichnungssprache mit deren Hilfe wir in unserem Fall dem Docker Dienst allerlei Konfigurationsparameter bereitstellen können, aus denen dieser dann unsere Docker Container, Netzwerke oder Volumes erstellt. Für ein funktionierendes Stackfile ist es wichtig, dass es bestimmten Regeln im Rahmen der YAML Formatierung folgt. Dies sind zum Beispiel Einrückungen, Trennzeichen und Anführungszeichen. Aber keine Angst, der in der Weboberfläche von Portainer eingebettete Webeditor hilft uns dabei, die Formatierungsregeln einzuhalten. Darüber hinaus ist es natürlich wichtig, dass wir in unserem Stackfile nur Parameter definieren, die der Docker Dienst auch verstehen und umsetzen kann. Hierzu stellt Docker mit der “compose file reference” eine ausführlichen Leitfaden zur Verfügung, welcher die verfügbaren Parameter auflistet und erläutert. Ein sehr einfaches Beispiel für ein Stackfile könnte zum Beispiel so aussehen: version: \"3\" # Version der compose file reference services: # Hier beginnt die definition der Services hello_world: # Name des ersten Service image: hello-world # Verwendetes Docker Image Dabei wird dann allerdings lediglich ein einzelner Container aus dem “hello-world”-Docker Image erstellt, dessen einzige Aufgabe darin besteht, die Funktion des Docker Dienstes zu testen und eine entsprechende Ausgabe im Log zu erzeugen. Weitere Infos zum Testimage findet ihr im Docker Hub: https://hub.docker.com/_/hello-world ","date":"15.02.2023","objectID":"/posts/2023/02/15_verwenden_von_stacks_in_portainer/:3:0","tags":[],"title":"Verwenden von Stacks (aka docker-compose) in Portainer","uri":"/posts/2023/02/15_verwenden_von_stacks_in_portainer/"},{"categories":["Tutorials","Portainer"],"content":"Stacks in der Weboberfläche Werfen wir nun zunächst einem Blick auf die Weboberfläche von Portainer. Unter dem Menüpunkt “Stacks” finden wir die Übersicht der von uns definierten Stacks. Mit einem Klick auf “+ Add Stack” gelangen wir in den Editor zum erstellen eines neuen Stackfiles. Hier können wir einen Namen festlegen und die “Build method” auswählen. Ich werde mich hier zunächst nur auf den Webeditor beschränken. Es ist aber natürlich auch möglich fertige Stackfiles hoch zu laden bzw. direkt aus einem Repository zu laden. Alternativ kann auch ein zuvor angelegtes Custom Template verwendet werden. Ausserdem befinden sich unterhalb des Editors noch weitere Optionen. Diese lassen wir fürs erste allerdings ebenfalls unbeachtet. Einzig der Button “Deploy the stack” ist für uns relevant. Ein Klick hierauf startet mit der Erstellung des Stacks und seiner Container. ","date":"15.02.2023","objectID":"/posts/2023/02/15_verwenden_von_stacks_in_portainer/:4:0","tags":[],"title":"Verwenden von Stacks (aka docker-compose) in Portainer","uri":"/posts/2023/02/15_verwenden_von_stacks_in_portainer/"},{"categories":["Tutorials","Portainer"],"content":"Stacks am Beispiel von ioBroker und Redis Zeit für ein echtes (aber etwas vereinfachtes) Beispiel. Wir wollen einen ersten Stack, besehend aus zwei Containern und einem gemeinsamen Bridge Netzwerk erstellen. Dabei werden wir das Bridge Netzwerk natürlich nicht manuell anlegen, sondern dies ebenfalls im Stackfile definieren und automatisch erstellen lassen. Außerdem speichern wir die Daten der Container in zwei, ebenfalls im Stack definierten, Volumes. Dazu habe ich das folgende Stackfile vorbereitet und mit kurzen Kommentaren versehen. version: \"3\" # Version der compose file reference services: # Hier beginnt die Definition der Services (Container) ####### ioBroker ####### iobroker: # Name des ersten Service container_name: iobroker # Container Name image: buanet/iobroker:latest-v8 # Docker Image und Tag hostname: iobroker # Hostname (als Instanz in ioBroker) restart: always # Restart policy networks: # Verbundene Netzwerke bridge: # Name des Netzwerks wie weiter unten definiert ports: # Ports - \"8081:8081\" # Durchgereichter Port für Admin environment: # Umgebungsvariablen - IOB_STATESDB_HOST=redis # Host für die Datenbankverbindung der States DB - IOB_STATESDB_PORT=6379 # Port für die Datenbankverbindung der States DB - IOB_STATESDB_TYPE=redis # Typ für die Datenbankverbindung der States DB volumes: # Verbundene Volumes - iobroker-data:/opt/iobroker # Volume wue weiter unten definiert depends_on: # Abhängigkeit des Containers - redis ####### redis ####### redis: # Name des zweiten Service container_name: redis # Container Name image: redis:latest # Docker Image und Tag restart: always # Restart policy networks: # Verbundene Netzwerke bridge: # Name des Netzwerks wie weiter unten definiert volumes: # Verbundene Volumes - redis-data:/data # Volume wue weiter unten definiert ####### Netzwerke ####### networks: # Definition der zu erstellenden Netzwerke bridge: # Name des Netzwerks driver: bridge # Typ/ Treiber des Netzwerks ####### Volumes ####### volumes: # Definition der zu erstellenden Volumes iobroker-data: # Name des Volumes redis-data: # Name des Volumes Wir erstellen nun also einen neuen Stack (ich habe als Namen iobroker gewählt) und kopieren das vorbereitete Stackfile in den Editor. Sofern der Editor kein Syntaxfehler feststellt, starten wir die Erstellung des Stacks mit dem Button “Deploy the stack”. Habe etwas Geduld... Da beim Erstellen des Stacks in der Regel noch die Docker Images aus dem Internet herunter geladen werden müssen, kann es schonmal sein, dass dieser Prozess ein wenig Zeit in Anspruch nimmt. habe also ein wenig Geduld. Solange keine Fehlermeldung erscheint ist alles in Ordnung. Nach Einiger Zeit, wenn der Stack erstellt ist, landen wir automatisch in der Übersicht der Stacks. Mit einem Klick auf unseren Stack bekommen wir eine Übersicht des Stacks und seiner Container. Unter “Networks” sollten wir außerdem ein neues Netzwerk namens “iobroker_bridge” finden. Der Name resultiert aus dem Namen des Stacks und dem im Stack definierten Netzwerknamens. Gleiches gilt natürlich auch für die von uns definierten Volumes. Damit ist unser Stack erstellt. Schaue dir auch gerne mal die Details der erstellten Elemente wie Container, Networks und Volumes an um zu verstehen wie diese Elemente zusammen hängen. Außerdem kannst du in den Details eine ganze Reihe an Informationen auslesen. Bei den Volumes z.B. den lokalen “Mount path”, oder bei den “Networks” die “Containers in network”. Unter Images findest du auch die beim Erstellen herunter geladenen Docker Images. Nutze einfach die Gelegenheit dich ein wenig mit Portainer vertraut zu machen. Der ein oder andere Menüpunkt wird dir in meinen weiteren Tutorials sicherlich noch über den Weg laufen. ","date":"15.02.2023","objectID":"/posts/2023/02/15_verwenden_von_stacks_in_portainer/:5:0","tags":[],"title":"Verwenden von Stacks (aka docker-compose) in Portainer","uri":"/posts/2023/02/15_verwenden_von_stacks_in_portainer/"},{"categories":["Tutorials","Portainer"],"content":"Konfiguration eines Containers über Stack ändern Docker Container können ja bekanntlich im laufenden Betrieb nicht einfach umkonfiguriert werden. Stattdessen muss man bei Änderungen den alten Container meist löschen und einen Neuen mit geänderter Konfiguration anlegen. Auch wenn es dazu im Portainer in den “Container details” mittlerweile die Funktion “Duplicate/Edit” gibt, ist das nicht selten ein reges geklicke. Und wehe es geht was schief, dann heißt es den Container komplett neu anlegen. Hier bieten die Portainer Stacks einen großen Vorteil. So besteht die Möglichkeit einfach nachträglich Änderungen am Stack durchzuführen und den Stack neu zu deployen. Dabei kümmert sich dann Portainer selbstständig um die Neuerstellung der geänderten Container, währen die anderen Container des Stacks in der Regel einfach weiter laufen. Um das Ganze ein wenig bildlicher zu machen, werden wir im Folgenden eine Änderung am ioBroker Container durchführen. Über das Hinzufügen der Umgebungsvariable PACKAGES wollen wir beim Start im Container automatisch das Paket nano installieren lassen. Dafür müssen wir in die Konfiguration unter environment: die folgende Zeile hinzufügen: - PACKAGES=nano Um dies zu erledigen öffnen wir die “Stack details” und wechseln in die Registerkarte “Editor”. Anschließend fügen wir die Zeile in der Konfiguration ein. Ein Klick auf “Update the stack” startet die Aktualisierung. In der Übersicht sollte jetzt lediglich der ioBroker Container neustarten, während unsere Redis Datenbank einfach weiter läuft. Im Log des Containers sollte zudem ersichtlich werden, dass bei Start nun das Paket nano installiert wird. ","date":"15.02.2023","objectID":"/posts/2023/02/15_verwenden_von_stacks_in_portainer/:6:0","tags":[],"title":"Verwenden von Stacks (aka docker-compose) in Portainer","uri":"/posts/2023/02/15_verwenden_von_stacks_in_portainer/"},{"categories":["Tutorials","Portainer"],"content":"Kurze Zusammenfassung Fassen wir also kurz zusammen. Mit Stacks lassen sich schnell und einfach Container erstellen und ändern. Außerdem können in Stacks mehrere Container zusammen mit Netzwerken und Volumes definiert werden. Portainer übernimmt dabei das Management der Container und Ressourcen. Das Stackfile wird in YAML geschrieben. Der Webeditor hilft uns bei der Syntax. Die verfügbaren Parameter sind in der “compose file reference” definiert. Soweit verstanden? Dann viel Spaß beim Ausprobieren. Du wirst nicht mehr ohne arbeiten wollen. ","date":"15.02.2023","objectID":"/posts/2023/02/15_verwenden_von_stacks_in_portainer/:7:0","tags":[],"title":"Verwenden von Stacks (aka docker-compose) in Portainer","uri":"/posts/2023/02/15_verwenden_von_stacks_in_portainer/"},{"categories":["Tutorials","Portainer"],"content":"Bonus: Stackfile Snippets Als kleinen Bonus noch ein paar Ausschnitte aus meiner Stackfile Sammlung. Bridge Netzwerk mit benutzerdefiniertem Adressraum networks: bridge: # Name des Netzwerks innerhalb des Stacks driver: bridge ipam: config: - subnet: 172.18.0.0/16 # Subnetz gateway: 172.18.0.1 # Gateway ip_range: 172.18.0.1/24 # Adressbereich Mehr Infos zum benutzerdefinierten Bridge Netzwerk MACVLAN Netzwerk mit benutzerdefiniertem Adressraum networks: my_macvlan: # Name des Netzwerks innerhalb des Stacks driver: macvlan driver_opts: parent: eth0 # Parent network card ipam: config: - subnet: 192.168.11.0/24 # Subnetz gateway: 192.168.11.1 # Gateway ip_range: 192.168.11.120/29 # Adressbereich Mehr Infos zum benutzerdefinierten MACVLAN Netzwerk. Existierendes Netzwerk einbinden networks: my_bridge: # Name des Netzwerks innerhalb des Stacks external: name: my_bridge # Name des bereits existierenden Netzwerks Container im Host Modus ausführen version: \"3\" services: iobroker: network_mode: host # Netzwerkmodus Host Ich hoffe ich konnte dir mit diesem Beitrag einen kleinen Überblick über das Arbeiten mit Portainer Stacks geben. Für Fragen und Feedback nutze gerne die Kommentarfunktion zu diesem Beitrag. MfG, André ","date":"15.02.2023","objectID":"/posts/2023/02/15_verwenden_von_stacks_in_portainer/:8:0","tags":[],"title":"Verwenden von Stacks (aka docker-compose) in Portainer","uri":"/posts/2023/02/15_verwenden_von_stacks_in_portainer/"},{"categories":["Tutorials","DiskStation","Portainer"],"content":"Ein Tutorial zur Einrichtung von Portainer auf der Synology DiskStation","date":"12.02.2023","objectID":"/posts/2023/02/12_portainer_auf_der_synology_diskstation/","tags":[],"title":"Portainer auf der Synology DiskStation","uri":"/posts/2023/02/12_portainer_auf_der_synology_diskstation/"},{"categories":["Tutorials","DiskStation","Portainer"],"content":"Einleitung Nachdem ich in meinem letzten Beitrag schon Einiges allgemein über Portainer geschrieben habe, möchte ich dir in diesem Tutorial zeigen, wie du Portainer speziell auf deine Synology DiskStation bekommst. Dabei werden wir sogar komplett auf die Kommandozeile verzichten. :) Zunächst aber wie üblich die… ","date":"12.02.2023","objectID":"/posts/2023/02/12_portainer_auf_der_synology_diskstation/:1:0","tags":[],"title":"Portainer auf der Synology DiskStation","uri":"/posts/2023/02/12_portainer_auf_der_synology_diskstation/"},{"categories":["Tutorials","DiskStation","Portainer"],"content":"Voraussetzungen Natürlich benötigst du eine Synology DiskStation, oder etwas allgemeiner, ein NAS auf dem der Synology DiskStation Manager (DSM) ausgeführt wird. Dabei ist es unerheblich ob dein System noch auf DSM 6, oder bereits mit DSM 7 arbeitet. Hauptsache ist, dass dein NAS das Docker Paket von Synology unterstützt (siehe Liste der Unterstützten Modelle). Da die Installation des Docker Pakets in der Regel keine große Hürde darstellen sollte, gehe ich auch davon aus, dass du dieses bereits über die Paketverwaltung Installiert hast und die Docker-Anwendung auf deinem Synology Desktop verfügbar ist. Zu guter Letzt brauchen wir noch ein Verzeichnis, welches wir als Datenverzeichnis in den Portainer Container mounten, um eine persistente Speicherung der Konfigurationsdaten zu ermöglichen. Hierzu können wir einfach über die Systemsteuerung einen gemeinsamen Order und die FileStation einen Unterordner anlegen. Ich habe mir dazu einen gemeinsamen Ordner docker auf Volume1 erstellt und einen Unterordner portainer-data angelegt. Daraus ergibt sich in meinem Fall der folgende Pfad für die Einbindung im Portainer Contaier: /volume1/docker/portainer-data Kurz zusammengefasst also nochmal die Voraussetzungen: Vorhandensein einer DiskStation mit DSM 6 oder 7 Installiertes Docker Paket aus dem Paket-Zentrum Verzeichnis für die Speicherung der Portainer-Konfigurationsdaten ","date":"12.02.2023","objectID":"/posts/2023/02/12_portainer_auf_der_synology_diskstation/:2:0","tags":[],"title":"Portainer auf der Synology DiskStation","uri":"/posts/2023/02/12_portainer_auf_der_synology_diskstation/"},{"categories":["Tutorials","DiskStation","Portainer"],"content":"Portainer Container starten Im Prinzip ist es nun bereits Zeit den Portainer Container mit dem docker run-Befehl zu starten. Den Befehl habe ich in meinem letzten Beitrag schon ausführlich erläutert. Er kann genau so auch auf der DiskStation verwendet werden. Einziger Unterschied ist, dass wir den Dateipfad für die Portainer Konfigurationsdaten anpassen müssen. Am Ende steht dabei dieser Befehl: docker run -d -p 9443:9443 \\ --name portainer --restart=always \\ -v /var/run/docker.sock:/var/run/docker.sock \\ -v /volume1/docker/portainer-data:/data \\ portainer/portainer-ce:latest Statt diesen Befehl jetzt über die Kommandozeile der DS einzutippen, nutzen wir zur Ausführung den Aufgabenplaner in der Systemsteuerung. Hier erstellen wir zunächst eine neue “Geplante Aufgabe” vom Typ “Benutzerdefiniertes Skript”. Wir vergeben einen Namen und ändern den (ausführenden) Benutzer auf root. Das ist notwendig, da zur Bedienung des Docker Dienstes erweiterte Berechtigungen erforderlich sind. Zuletzt können wir das Häkchen bei “Aktiviert” noch entfernen, da wir die Aufgabe ja nur manuell ausführen werden. Den Zeitplan können wir konfigurieren wie wir wollen, da die Aufgabe ja nicht aktiviert sein wird. Ich mache es trotzdem wie im Screenshot dargestellt. So bin ich sicher, dass auch falls die Aufgabe mal aus Versehen aktiviert wurde keine zeitgesteuerte Ausführung statt findet. In der letzten Registerkarte “Aufgabeneinstellungen” konfigurieren wir dann letztendlich unter “Benutzerdefiniertes Skript” unseren docker run-Befehl. Damit ist die Konfiguration der Aufgabe abgeschlossen. Über die Schaltfläche “Ausführen” oder per Rechtsklick \u003e “Ausführen” auf die Aufgabe, können wir die Erstellung des Portainer Docker Containers anstoßen. Die Abfrage bestätigen wir natürlich mit “Ja”. Die Erstellung kann nun einen kurzen Moment dauern. Den Erfolg können wir über die im DSM eingebaute Administrationsoberfläche für Docker überprüfen. Wenn es so ausschaut, dann läuft unser Portainer bereits. Wir können nun auf die Weboberfläche des Portainer zugreifen, indem wir die URL nach folgendem Schema aufrufen: https://[IP oder Hostname]:9443 Die folgende Seite sollte erscheinen: Hier können wir Portainer aus einem Backup wiederherstellen oder einfach mit einer frischen Portainer Installation starten, indem wir einen neuen Benutzer für die Administration anlegen. Nach einem Klick auf “Create user” landen wir im “Quick Setup”. Mit einem Klick auf “Get Started” ist das “Quick Setup” auch schon erledigt, und wir landen in der Übersicht unseres Portainers. Unser Portainer ist nun startklar. Da sich mit einer Portainer Weboberfläche mehrere Docker Hosts (Environments) verwalten lassen, müssen wir zum Anlegen unseres ersten Containers noch unser Environment auswählen. Dies tun wir mit einem Klick auf “local” oder auf den Button “Live connect”. ","date":"12.02.2023","objectID":"/posts/2023/02/12_portainer_auf_der_synology_diskstation/:3:0","tags":[],"title":"Portainer auf der Synology DiskStation","uri":"/posts/2023/02/12_portainer_auf_der_synology_diskstation/"},{"categories":["Tutorials","DiskStation","Portainer"],"content":"Bonus: Portainer Aktualisieren Von Zeit zu Zeit bekommt natürlich auch Portainer Updates. Wenn ein neues Update zur Verfügung steht, informiert euch Portainer über die Weboberfläche. Da Portainer ein Docker Container ist, lässt sich das Update aber leider nicht über die Weboberfläche einspielen. Stattdessen müssen wir den Portainer Container und das Portainer Docker Image löschen und den Container neu erstellen. Und das geht so: Zunächst rufen wir die Docker Web UI im Synology DSM auf und stoppen den Portainer Container. Über das Menü “Aktion” \u003e “Löschen” oder “Rechtsklick” \u003e “Löschen” entfernen wir den Portainer Container. Anschließend wechseln wir auf der linken Seite in den Bereich “Image”. Dort entfernen wir auch das Portainer Docker Image. Anschließend können wie über den Aufgabenplaner, wie oben beschrieben, den Portainer Container neu erstellen. Dabei wird automatisch das neuste Docker Image geladen und verwendet. Sobald der Container erstellt ist, sollte auch der Zugriff auf die Weboberfläche wieder wie gewohnt funktionieren. Hinweis Für den Fall, dass beim Update etwas schief geht, bietet es sich an vor dem Update eure Portainer Konfigurationsdaten zu sichern. Das kannst du entweder über das weg Kopieren des portainer-data-Ordners machen oder über den Export der Konfiguration im Portainer unter “Settings” \u003e “Backup Portainer”. Ich hoffe ich konnte dir mit diesem Beitrag einen kleinen Überblick über die Einrichtung von Portainer auf der Synology DiskStation geben. Für Fragen und Feedback nutze gerne die Kommentarfunktion zu diesem Beitrag. MfG, André ","date":"12.02.2023","objectID":"/posts/2023/02/12_portainer_auf_der_synology_diskstation/:4:0","tags":[],"title":"Portainer auf der Synology DiskStation","uri":"/posts/2023/02/12_portainer_auf_der_synology_diskstation/"},{"categories":["Docker Images","Portainer"],"content":"Ein Überblick über Portainer als grafische Benutzeroberfläche zur Administration des Docker Dienstes","date":"10.02.2023","objectID":"/posts/2023/02/10_portainer_zur_verwaltung_des_docker_dienstes/","tags":[],"title":"Portainer zur Verwaltung des Docker Dienstes","uri":"/posts/2023/02/10_portainer_zur_verwaltung_des_docker_dienstes/"},{"categories":["Docker Images","Portainer"],"content":"Einleitung Bei Docker handelt es sich ja bekanntlich um einen Dienst der normalerweise über die Kommandozeile bedient wird. Über verschiedene Kommandos lassen sich Images herunterladen, Container erstellen und noch vieles mehr. Wer allerdings keine Lust hat Kommandos auswendig zu lernen oder lange Befehlsaufrufe aus verschiedenen Parametern zusammen zu stellen, der greift gerne auf eine grafische Oberfläche zurück. Bei vielen Systemen, die heutzutage Docker von Haus aus unterstützen, sind diese grafischen Benutzeroberflächen bereits integriert. Bei den gängigen NAS-Systemen wie Synology DSM, TrueNAS oder Unraid zum Beispiel, ist die Bedienung des Docker Dienstes direkt über die eigenen, webbasierten Administrationsoberflächen möglich. Doch nicht immer schöpfen diese Oberflächen die vollen Möglichkeiten, die Docker eigentlich bietet, auch aus. So ist es zum Beispiel im DSM bis heute nicht möglich Docker Containern Systemressourcen oder Devices zuzuteilen. ","date":"10.02.2023","objectID":"/posts/2023/02/10_portainer_zur_verwaltung_des_docker_dienstes/:1:0","tags":[],"title":"Portainer zur Verwaltung des Docker Dienstes","uri":"/posts/2023/02/10_portainer_zur_verwaltung_des_docker_dienstes/"},{"categories":["Docker Images","Portainer"],"content":"Was ist Portainer? An dieser Stelle kommt Portainer ins Spiel. Portainer ist eine eigens für die Verwaltung von Docker konzipierte, webbasierte Benutzeroberfläche und wird einfach als eigener Docker Container aufgesetzt. Indem der Container Zugriff auf den Docker Socket erhält, ist es dem darin laufenden Portainer möglich andere Container zu erstellen und zu verwalten (und noch vieles mehr). Die Community Edition (CE) von Portainer ist ein Open-Source-Projekt und steht allen Usern kostenlos zur Verfügung. Zusätzlich existiert auch eine kostenpflichtige Business Edition mit einigen interessanten Zusatzfeatures. In meinen Tutorials beziehe ich mich aber ausschließlich auf die Community Edition. Tip Die Portainer Business Edition lässt sich für bis zu 5 Nodes ebenfalls kostenlos nutzen. Erforderlich ist lediglich eine Registrierung. Die entsprechende Lizenz wird per E-Mail zugeschickt. Mit der Lizenz kann dann das portainer-ee Docker Image verwendet werden. Ein Upgrade von der Community Edition ist dabei problemlos möglich. ","date":"10.02.2023","objectID":"/posts/2023/02/10_portainer_zur_verwaltung_des_docker_dienstes/:2:0","tags":[],"title":"Portainer zur Verwaltung des Docker Dienstes","uri":"/posts/2023/02/10_portainer_zur_verwaltung_des_docker_dienstes/"},{"categories":["Docker Images","Portainer"],"content":"Wo finde ich weitere Infos? Bevor ich dir an einem kurzen Beispiel zeige, wie du einen Portainer Docker Container auf setzt und die Ersteinrichtung erledigst, hier noch eine kleine Linkliste zu den wichtigsten Informationen rund um Portainer: Portainer Website » portainer.io Portainer Documentation » docs.portainer.io Portainer Source Code \u0026 Issues » github.com/portainer/portainer Portainer Business Edition - Take 5 for free » portainer.io/take-5 Portainer Comunity Edition im Docker Hub » hub.docker.com/r/portainer/portainer-ce Portainer Business Edition im Docker Hub » hub.docker.com/r/portainer/portainer-ee ","date":"10.02.2023","objectID":"/posts/2023/02/10_portainer_zur_verwaltung_des_docker_dienstes/:3:0","tags":[],"title":"Portainer zur Verwaltung des Docker Dienstes","uri":"/posts/2023/02/10_portainer_zur_verwaltung_des_docker_dienstes/"},{"categories":["Docker Images","Portainer"],"content":"Portainer Docker Container erstellen Im Folgenden werden wir einen frischen Portainer Docker Container der Community Edition erstellen und dafür sorgen, dass unsere Konfiguration in einem lokalen Verzeichnis bzw. Docker Volume gespeichert wird. ","date":"10.02.2023","objectID":"/posts/2023/02/10_portainer_zur_verwaltung_des_docker_dienstes/:4:0","tags":[],"title":"Portainer zur Verwaltung des Docker Dienstes","uri":"/posts/2023/02/10_portainer_zur_verwaltung_des_docker_dienstes/"},{"categories":["Docker Images","Portainer"],"content":"Voraussetzungen Ich gehe davon aus, dass die folgenden Voraussetzungen bereits erfüllt sind: Linux basierter Docker Host (NAS Systeme basieren in der Regel auf Linux) Zugriff auf die Kommandozeile des Docker Hosts Installierter und gestarteter Docker Dienst Internetzugang für den Docker Host ","date":"10.02.2023","objectID":"/posts/2023/02/10_portainer_zur_verwaltung_des_docker_dienstes/:4:1","tags":[],"title":"Portainer zur Verwaltung des Docker Dienstes","uri":"/posts/2023/02/10_portainer_zur_verwaltung_des_docker_dienstes/"},{"categories":["Docker Images","Portainer"],"content":"Persistente Datenspeicherung Damit unsere Konfigurationsdaten dauerhaft gespeichert werden, benötigen wir entweder ein lokales Verzeichnis oder ein Docker-Volume auf dem Docker Host. Dieses Verzeichnis bzw. Volume mounten wir dann beim Erstellen des Docker Containers in den Pfad /data, in dem Portainer alle Konfigurationsdaten speichert. So stellen wir sicher, dass unsere Konfigurationsdaten erhalten bleiben, auch wenn der Portainer Container gelöscht wird. Ich persönlich bevorzuge die Speicherung der Daten meiner Container in einem Verzeichnis, statt in einem Docker Volume. Dazu lege ich mir zunächst im Verzeichnis /mnt meines Docker Hosts ein Verzeichnis docker an. Es tut natürlich auch jeder andere lokale Pfad, wie zum Beispiel das Home Verzeichnis deines Benutzers. Innerhalb des docker-Verzeichnisses erstelle ich mir dann ein Unterverzeichnis portainer_data. Der vollständig Pfad für meine Portainer Daten lautet nun also: /mnt/docker/portainer_data. ","date":"10.02.2023","objectID":"/posts/2023/02/10_portainer_zur_verwaltung_des_docker_dienstes/:4:2","tags":[],"title":"Portainer zur Verwaltung des Docker Dienstes","uri":"/posts/2023/02/10_portainer_zur_verwaltung_des_docker_dienstes/"},{"categories":["Docker Images","Portainer"],"content":"Portainer Container starten Mit lokalem Verzeichnispfad Da nun alles vorbereitet ist, erstellen wir den Container mit folgendem Befehl: docker run -d -p 9443:9443 \\ --name portainer --restart=always \\ -v /var/run/docker.sock:/var/run/docker.sock \\ -v /mnt/docker/portainer_data:/data \\ portainer/portainer-ce:latest Der Befehl setzt sich dabei aus folgenden Parametern zusammen: docker run « zum Erstellen eines neuen Containers -d « für “detached” -p 9443:9443 « Port für den Zugriff auf die Web UI --name portainer « Container Name --restart=always « Restart Policy = always -v /var/run/docker.sock:/var/run/docker.sock « Mount des Docker Sockets -v /mnt/docker/portainer_data:/data « Mount des Datenverzeichnisses portainer/portainer-ce:latest « Verwendetes Image und Tag Mit Docker Volume Falls du statt eines lokalen Verzeichnisses ein Docker Volume verwenden willst, kannst du mit dem folgenden Befehl ein Volume mit dem Namen portainer-data erstellen: docker volume create portainer-data Den Portainer Container startest du in diesem Fall dann mit: docker run -d -p 9443:9443 \\ --name portainer --restart=always \\ -v /var/run/docker.sock:/var/run/docker.sock \\ -v portainer-data:/data \\ portainer/portainer-ce:latest ","date":"10.02.2023","objectID":"/posts/2023/02/10_portainer_zur_verwaltung_des_docker_dienstes/:4:3","tags":[],"title":"Portainer zur Verwaltung des Docker Dienstes","uri":"/posts/2023/02/10_portainer_zur_verwaltung_des_docker_dienstes/"},{"categories":["Docker Images","Portainer"],"content":"Zugriff auf die Portainer Web UI Nachdem der Container gestartet ist, können wir auf die Weboberfläche des Portainer zugreifen, indem wir die URL nach folgendem Schema aufrufen: https://[IP oder Hostname]:9443 Wenn alles korrekt ausgeführt wurde, erscheint die folgende Seite: Hier können wir Portainer aus einem Backup wiederherstellen oder einfach mit einer frischen Portainer Installation starten, indem wir einen neuen Benutzer für die Administration anlegen. Nach einem Klick auf “Create user” landen wir im “Quick Setup”. Mit einem Klick auf “Get Started” ist das “Quick Setup” auch schon erledigt, und wir landen in der Übersicht unseres Portainers. Unser Portainer ist nun startklar. Da sich mit einer Portainer Weboberfläche mehrere Docker Hosts (Environments) verwalten lassen, müssen wir zum Anlegen unseres ersten Containers noch unser Environment auswählen. Dies tun wir mit einem Klick auf “local” oder auf den Button “Live connect”. Ich hoffe ich konnte dir mit diesem Beitrag einen kleinen Überblick über Portainer und dessen Inbetriebnahme geben. Für Fragen und Feedback nutze gerne die Kommentarfunktion zu diesem Beitrag. MfG, André ","date":"10.02.2023","objectID":"/posts/2023/02/10_portainer_zur_verwaltung_des_docker_dienstes/:4:4","tags":[],"title":"Portainer zur Verwaltung des Docker Dienstes","uri":"/posts/2023/02/10_portainer_zur_verwaltung_des_docker_dienstes/"},{"categories":["Sonstiges"],"content":"Grundlagen und Voraussetzungen für das Verstehen und Umsetzen meiner Tutorials","date":"01.02.2023","objectID":"/posts/2023/02/01_grundlagen/","tags":[],"title":"Grundlagen und Voraussetzungen","uri":"/posts/2023/02/01_grundlagen/"},{"categories":["Sonstiges"],"content":"Bevor wir unser Smarthome mit Hilfe von Docker zum Leben erwecken können, sollten wir unbedingt kurz über die Grundlagen und Voraussetzungen sprechen, die für das Verständnis und die erfolgreiche Umsetzung meiner Tutorials erforderlich sind. Dazu habe ich ein paar Fragen zusammen gestellt über die du dir vorab einmal Gedanken gemacht haben solltest. ","date":"01.02.2023","objectID":"/posts/2023/02/01_grundlagen/:0:0","tags":[],"title":"Grundlagen und Voraussetzungen","uri":"/posts/2023/02/01_grundlagen/"},{"categories":["Sonstiges"],"content":"Was ist Docker? Wer in seinem Smarthome die Vorzüge von Docker nutzen möchte, der wird nicht umhin kommen sich tiefer mit diesem Thema zu beschäftigen und sich ggf. selbst Wissen dazu anzueignen. Wenn es um die Definition von Docker geht, sagt Wikipedia dazu: „Docker ist eine Freie Software zur Isolierung von Anwendungen mit Containervirtualisierung.“. Zugegeben, so richtig schlau gemacht (in praktischer Hinsicht) hat mich der Artikel nicht. Daher hier ein kleiner Tipp: Schaut mal bei Youtube vorbei. Dort gibt es eine Menge Informationen zu Docker. Das geht los bei “Docker in 5 Minuten” und endet bei mehrteiligen Video-Tutorials oder zweistündigen Online-Video-Kursen. Da ist wirklich für jeden was dabei. Für alle weiteren Infos zu Docker würde ich dann unbedingt auf die offiziellen Docker Docs verweisen. Hier findest du wirklich alles was es zum Thema zu wissen gibt. ","date":"01.02.2023","objectID":"/posts/2023/02/01_grundlagen/:1:0","tags":[],"title":"Grundlagen und Voraussetzungen","uri":"/posts/2023/02/01_grundlagen/"},{"categories":["Sonstiges"],"content":"Welche Hardware benötige ich? Ein weiteres Thema ist die Frage nach der verwendeten Hardwareplattform für den Docker Dienst. Mittlerweile ist Docker weit verbreitet, sodass du den Dienst eigentlich in allen gängigen NAS Systemen finden kannst. Unter Linux gibt es Distributionen die entweder bereits Docker enthalten oder die Möglichkeit bieten den Dienst bei der Einrichtung automatisch installieren zu lassen. Und auch unter Windows hält der Dienst dank WSL Einzug. Im folgenden habe ich einmal die gängigsten Plattformen aufgelistet und eine kurze Einschätzung, basierend auf meinen eigenen Erfahrungen, formuliert. Vielleicht hilft dir dies bei der Entscheidung wie du Docker in deiner Smarthome Umgebung integrieren kannst. ","date":"01.02.2023","objectID":"/posts/2023/02/01_grundlagen/:2:0","tags":[],"title":"Grundlagen und Voraussetzungen","uri":"/posts/2023/02/01_grundlagen/"},{"categories":["Sonstiges"],"content":"NAS Systeme Der einfachste Weg Docker zu nutzen führt wahrscheinlich über die fertigen NAS Lösungen der gängigen Anbieter wie Synology und QNAP oder NAS-Betriebssysteme wie Unraid, OpenMediaVault oder TreuNAS. Der Vorteil liegt auf der Hand. Docker ist auf den meisten Systemen bereits vorhanden, oder lässt sich über Zusatzpakete bzw. Apps aus der Weboberfläche heraus installieren. Das Erstellen und Verwalten von Containern erfolgt dann ebenfalls über eigens entwickelte Weboberflächen. Leider können diese herstellerspezifischen Oberflächen meist nicht den kompletten Funktionsumfang von Docker bereitstellen. Abhilfe schaffen hier aber herstellerunabhängige Oberflächen wie z.B. Portainer. Ein Tool auf das ich hier im Blog zeitnah noch genauer eingehen werde. Ein weiterer Aspekt den es bei NAS Systemen zu berücksichtigen gilt, sind die Systemressourcen. Gerade die kleineren, günstigen Geräte kommen oftmals mit wenig Rechenleistung und Arbeitsspeicher. Das reicht zwar für die Verwaltung von Netzwerkspeicher, bei größeren Aufgaben wie z.B. der Steuerung eines Smarthomes oder einer Videoaufzeichnung stoßen die Geräte schnell an ihre Grenzen. Du solltest also stets die Auslastung der Ressourcen im Blick behalten und, sofern möglich, z.B. den Arbeitsspeicher entsprechend aufrüsten. Für jeden der bereits ein NAS sein Eigen nennt ist dies eine gute Option um in das Thema Smarthome mit Docker einzutauchen. Wer kein NAS besitzt, der sollte in Anbetracht des in der Regel relativ hohen Anschaffungspreises abwägen ob ein NAS die richtige Entscheidung ist. Andere Lösungen wie SBCs oder Mini PCs bieten oftmals mehr Leistung bei weniger Investition. Meine Erfahrung: Ich habe mit einer Synology DiskStation 1515+ (Prozessor: Intel Atom C2538 Quad Core 2,4 GHz) und 6GB Arbeitsspeicher begonnen. Nachdem ich aber einen Plex Mediaserver und die Survelliance Station (Videoüberwachung) mit 6 Kameras aktiviert hatte, war das dann doch ein bisschen zu wenig Leistung und ich musste mit meinem Smarthome auf einen anderen Docker Host umziehen. ","date":"01.02.2023","objectID":"/posts/2023/02/01_grundlagen/:2:1","tags":[],"title":"Grundlagen und Voraussetzungen","uri":"/posts/2023/02/01_grundlagen/"},{"categories":["Sonstiges"],"content":"Einplatinencomputer (RaspberryPi \u0026 Co) Gerade auch wegen ihres geringen Stromverbrauchs sind Einplatinen Computer, kurz SBCs, wie der Raspberry Pi sehr beliebt wenn es um die Übernahme von Aufgaben im Smarthome geht. Allerdings gilt auch hier, dass die Ressourcen schnell erschöpft sein können. Ich gebe zu, ich bin ein Fan vom Raspberry Pi 4 mit 4 oder 8 GB RAM. Hier bekommst du schon eine Menge geboten. Zudem ist der Raspberry wegen seiner Verbreitung gut dokumentiert und es finden sich zahllose Anleitungen und Tutorials im Netz. Ich persönlich halte den Raspberry Pi und seine SBC-Kollegen für die beste Möglichkeit mit relativ wenig Investition den Einstieg in Smarthome mit Docker zu wagen. Zumindest wenn du nicht schon ein Docker taugliches NAS Zuhause hast. Trotzdem birgt der Raspberry Pi natürlich seine Tücken. So hört man immer wieder von SD Karten die durch zu viele Lese- und Schreibzyklen das Zeitliche segnen. Aber auch hierfür gibt es Lösungen. Diese reichen von Konfigurationsänderungen zur Minimierung der Last, über die Verwendung externer Speichermedien, bis hin zum Umstieg auf eine Raspberry Pi Alternative mit z.B. einer SATA-Schnittstelle für Festplatten. Meine Empfehlung: Schmeiß die Stichworte dazu einfach mal in eine Suchmaschine. Du wirst reichlich Erfahrungsberichte und Lösungen finden. Versprochen. ","date":"01.02.2023","objectID":"/posts/2023/02/01_grundlagen/:2:2","tags":[],"title":"Grundlagen und Voraussetzungen","uri":"/posts/2023/02/01_grundlagen/"},{"categories":["Sonstiges"],"content":"Mini PCs Mini PCs, wie z.B. der Intel NUC, sind wohl sowas wie die nächste Evolutionsstufe der SBCs. Geringer Stromverbrauch, genügend Leistung und manchmal sogar die Möglichkeit zwei SSDs zu verbauen erfüllen in der Regel alle Wünsche wenn es um den eigenen Homeserver für Docker geht. Egal ob als Docker Host mit Ubuntu Betriebssystem oder gar als komplette Virtualisierungsplattform mit Proxmox oder VMware. Viele User (mich eingeschlossen) setzen auf die kleinen PCs. Allerdings sind hier die technischen Hürden zum Aufsetzen eines solchen Systems auch deutlich höher als das Flashen einer SD Karte für einen Einplatinen Computer. Dank ausführlicher Anleitungen im Internet für fortgeschrittene Benutzer aber kein Problem. Meine Erfahrung: Für mein Smarthome habe ich eine Zeit lang auf einen Intel NUC (Intel Quad-Core J3455 Prozessor 4x 1,50 GHz mit Turbo-Boost bis zu 4x 2,30 GHz) mit 16 GB RAM gesetzt. Meines Erachtens für ein mittelgroßes Smarthome völlig ausreichend. Umgestiegen bin ich letztendlich nur, weil ich mir für die Softwareentwicklung, Desktop Virtualisierung und meine Testumgebung einen eigenen Proxmox Server aufgesetzt habe. Da dieser genügend Ressourcen hat, habe ich schlicht den NUC eingespart und das komplette Smarthome Setup auf den Server umgezogen. ","date":"01.02.2023","objectID":"/posts/2023/02/01_grundlagen/:2:3","tags":[],"title":"Grundlagen und Voraussetzungen","uri":"/posts/2023/02/01_grundlagen/"},{"categories":["Sonstiges"],"content":"Proxmox, VMware, Hyper-V oder Virtual Box Die letzte Evolutionsstufe für das Smarthome ist dann wohl die Verwendung eines echten Servers als Hypervisor (Virtualisierungshost). Letztendlich handelt es sich dabei um ein Server Betriebssystem (läuft aber in der Regel auch auf einem Mini PC) über welches man virtuelle Maschinen erstellen kann, in denen dann z.B. ein Docker Dienst seine Arbeit verrichtet. Zum Aufsetzen einer solchen Lösung ist dann allerdings schon etwas mehr technisches Verständnis und Wissen erforderlich. Vor Allem wenn es dann auch um Themen wie Storage oder hochverfügbarkeit geht. Zudem sind entsprechende Server und Lösungen meist für das eigene Smarthome, in Hinblick auf Leistung, Anschaffungspreis und Stromverbrauch, recht überdimensioniert. Eine solche virtuelle Infrastruktur hat natürlich aber auch Vorteile. So ist es in der Regel dank Snapshot Funktionalitäten und eingebauten Backup Tools recht einfach möglich Sicherungen der virtuellen Maschinen anzulegen und bei Bedarf auf Knopfdruck wiederherzustellen. Und auch über Systemressourcen muss man sich meist keine Gedanken mehr machen. Meine Erfahrung: Ich setze seit einiger Zeit auf einen leistungsfähigen Desktop PC mit Proxmox. Darüber laufen verschiedene virtuelle Maschinen und LXC Container. Darin dann wiederum mein Docker Dienst und die verschiedenen Container für meine Smarthome-Dienste. Ich nutze den Server allerdings nicht nur als Zuhause für mein Smarthome, sondern auch für meine Test- und Spielumgebung sowie zur Softwareentwicklung und Desktop-Virtualisierung. ","date":"01.02.2023","objectID":"/posts/2023/02/01_grundlagen/:2:4","tags":[],"title":"Grundlagen und Voraussetzungen","uri":"/posts/2023/02/01_grundlagen/"},{"categories":["Sonstiges"],"content":"Habe ich mein Netzwerk im Griff? Nach dem kleinen Ausflug bezüglich der Hardwareplattformen auf denen wir Docker einsetzen können, nun zurück zu einem nicht zwingend entscheidendem, aber sehr wohl wichtigem Thema: dem Heimnetzwerk. Je größer dein Smarthome wird, um so wichtiger ist meines Erachtens, dass du etwas mit Begriffen wie DHCP, DNS oder Gateway anfangen kannst und weißt was z.B. IP-Adressen sind. Bei größeren Smarthomes, oder wenn dir bestimmte Sicherheitsthemen wichtig sind, wird dann vermutlich irgendwann auch so etwas wie VLANs interessant. Also genau die richtige Zeit dich hier etwas weiter zu bilden, wenn es hier noch Wissenslücken gibt. Denn, genauso wie das Heimnetzwerk deine Fritzbox die physischen Netzwerkgeräte bei dir Zuhause verbindet, so verbindet der Docker Dienst mit seiner eigenen Netzwerkkonfiguration später auch die Docker Container untereinander oder macht sie aus dem Heimnetzwerk erreichbar. Wenn du dich also in deinem Heimnetzwerk auskennst, wird es dir leichter fallen die virtuelle Netzwerkstruktur von Docker zu verstehen und für deine Zwecke einzusetzen. Dazu aber zu gegebener Zeit mehr. ","date":"01.02.2023","objectID":"/posts/2023/02/01_grundlagen/:3:0","tags":[],"title":"Grundlagen und Voraussetzungen","uri":"/posts/2023/02/01_grundlagen/"},{"categories":["Sonstiges"],"content":"Habe ich Angst vor der Kommandozeile? Zugegeben, diese Frage ist nicht so richtig ernst gemeint. Obwohl ich mir nicht sicher bin ob es das vielleicht nicht doch als Krankheitsbild gibt… Wie dem auch sei, ein Docker-Dienst fühlt sich am wohlsten in einer Linux Umgebung. Wenn du bereits erste Erfahrungen im Umgang mit Linux sammeln durftest, weißt du sicher wie schnell man dort den Weg auf die Kommandozeile findet. Und auch in einem Smarthome mit Docker wirst du hin und wieder die Kommandozeile bemühen müssen. In meinen Tutorials versuche ich dies zwar immer so gut es geht zu umschiffen, aber es ist vielleicht keine schlechte Idee wenn du grundsätzlich weißt, wie du auf die Kommandozeile zugreifst und etwas mit Befehlen wie cd, mkdir, ls oder sudo anfangen kannst. Soviel dann ersteinmal zu den Grundlagen für’s Smarthome. Ich hoffe meine Erfahrungen und Tips helfen dir, deinen ganz eigenen Weg ins Smarthome mit Docker zu finden. Für Fragen und Feedback nutze gerne die Kommentarfunktion zu diesem Beitrag. MfG, André ","date":"01.02.2023","objectID":"/posts/2023/02/01_grundlagen/:4:0","tags":[],"title":"Grundlagen und Voraussetzungen","uri":"/posts/2023/02/01_grundlagen/"},{"categories":["Sonstiges"],"content":"Ein kurzes Into zu meinem neuen Blog, der sich mit Docker im Smarthome auseinandersetzen wird.","date":"01.02.2023","objectID":"/posts/2023/02/01_erster_beitrag/","tags":[],"title":"Ein Blog über Smarthome mit Docker","uri":"/posts/2023/02/01_erster_beitrag/"},{"categories":["Sonstiges"],"content":"Nachdem mir die alte Website mit Wordpress zu schwerfällig geworden ist, und ich die Entscheidung getroffen habe meine Tutorials komplett von meine Projekten und deren Dokus zu lösen, habe ich mich auf die Suche nach einem neuen Konzept begeben. Herausgekommen ist nun doch (wieder) ein Blog. ","date":"01.02.2023","objectID":"/posts/2023/02/01_erster_beitrag/:0:0","tags":[],"title":"Ein Blog über Smarthome mit Docker","uri":"/posts/2023/02/01_erster_beitrag/"},{"categories":["Sonstiges"],"content":"Was ist der Plan? Meine Idee ist, diesen Blog voll und ganz einem Thema zu widmen: Smarthome mit Docker. Das bedeutet, dass sich meine Beiträge und Tutorials hier hauptsächlich darum drehen werden, wie man mit Hilfe von Docker ein Smarthome aufbauen und betreiben kann. Das schließt auch die bereits existierenden Tutorials von meiner alten Website (smarthome.buanet.de) mit ein. Diese werde ich entsprechend überarbeiten und nach und nach in die Beiträge dieses Blogs einfließen lassen. ","date":"01.02.2023","objectID":"/posts/2023/02/01_erster_beitrag/:1:0","tags":[],"title":"Ein Blog über Smarthome mit Docker","uri":"/posts/2023/02/01_erster_beitrag/"},{"categories":["Sonstiges"],"content":"Dieser Blog Bei diesem Blog handelt es sich um einen privaten Blog. Alle Inhalte veröffentliche ich mit Hinweis auf die MIT Lizenz. Falls ihr also meine Inhalte verwerten wollt, steht euch hier nichts im Wege. Ich erwarte lediglich einen entsprechenden Quellverweis. Des Weiteren übernehme ich natürlich auch keinerlei Haftung für Anleitungen und Tutorials die ich euch hier kostenfrei bereit stelle. ","date":"01.02.2023","objectID":"/posts/2023/02/01_erster_beitrag/:2:0","tags":[],"title":"Ein Blog über Smarthome mit Docker","uri":"/posts/2023/02/01_erster_beitrag/"},{"categories":["Sonstiges"],"content":"Hinter den Kulissen Diese Website ist mit HUGO erstellt. Hugo ist ein unkompliziertes Framework um statische Websites zu generieren. Für das Design kommt das Theme LoveIt zum Einsatz. Alles zusammen hoste ich, ebenso wie die Docs Website zu meinen Projekten (docs.buanet.de), bei Github. Wer sich also für den Quellcode meines Blogs interessiert wird hier fündig. ","date":"01.02.2023","objectID":"/posts/2023/02/01_erster_beitrag/:3:0","tags":[],"title":"Ein Blog über Smarthome mit Docker","uri":"/posts/2023/02/01_erster_beitrag/"},{"categories":["Sonstiges"],"content":"Kommentare Ich habe mich dazu entschlossen im neuen Blog (wieder) eine Kommentarfunktion anzubieten. Das Ganze ist powered by utteranc.es und basiert auf Github issues. Das sparrt mir letztendlich viel Zeit und macht es deutlich einfacher Kommentare zu abbonieren und bei Neuigkeiten entsprechend benachrichtigt zu werden. Außerdem ermöglicht dies, durch die Markdown-Unterstützung, das einfache Einbinden von Bildern und Code. Ich bin mal gespannt wie das so laufen wird. ","date":"01.02.2023","objectID":"/posts/2023/02/01_erster_beitrag/:4:0","tags":[],"title":"Ein Blog über Smarthome mit Docker","uri":"/posts/2023/02/01_erster_beitrag/"},{"categories":["Sonstiges"],"content":"Keine Werbung Wie schon beim Vorgänger dieser Website (smarthome.buanet.de) stelle ich meine Beiträge und Tutorials ohne jegliche Werbung und/ oder Sponsoring zur Verfügung. Im Umkehrschluss bedeutet dies, dass ihr hier nur zu lesen bekommt, was meiner persönlichen Meinung entspricht. Wenn ich ein Produkt oder eine Marke erwähne, dann aus eigenem Antrieb und weil ich davon überzeugt, oder eben nicht überzeugt bin. ","date":"01.02.2023","objectID":"/posts/2023/02/01_erster_beitrag/:5:0","tags":[],"title":"Ein Blog über Smarthome mit Docker","uri":"/posts/2023/02/01_erster_beitrag/"},{"categories":["Sonstiges"],"content":"Alles nur ein Hobby Ich betreibe diesen Blog nur als Hobby neben meiner Tätigkeit als Ehemann, Vater, Hausmeister und Informatiker (und etwa 100 weiteren interessanten Jobs). Erwartet also bitte nicht, dass ich hier täglich oder wöchentlich neue Beiträge oder Tutorials raus haue. ","date":"01.02.2023","objectID":"/posts/2023/02/01_erster_beitrag/:6:0","tags":[],"title":"Ein Blog über Smarthome mit Docker","uri":"/posts/2023/02/01_erster_beitrag/"},{"categories":["Sonstiges"],"content":"Kontakt Ich biete auf diesem Blog absichtlich kein Kontaktformular an, da dies in der Vergangenheit eigentlich nur für Spam oder persönliche Support-Anfragen genutzt worden ist. Beides möchte ich eigentlich nicht in meinem Posteingang haben. Daher gilt: Falls du zu einem Post Fragen oder Ergänzungen hast nutze gerne die öffentliche Kommentarfunktion. Für den Fall, dass du aus anderen Gründen persönlich mit mir in Kontakt treten willst, findest du auf der Startseite unter dem Profilbild eine Liste der Communities in denen ich unterwegs bin. Ich bin mir sicher, dass du einen Weg finden wirst. Ich denke damit ist fürs Erste alles gesagt. Viel Spaß beim Lesen und Ausprobieren. ","date":"01.02.2023","objectID":"/posts/2023/02/01_erster_beitrag/:7:0","tags":[],"title":"Ein Blog über Smarthome mit Docker","uri":"/posts/2023/02/01_erster_beitrag/"},{"categories":null,"content":"Angaben gemäß § 5 TMG André Germann Hühnerkamp 4 21423 Winsen Kontakt: Telefon: +49 4133 2011693 E-Mail: info@buanet.de ","date":"01.02.2023","objectID":"/impressum/:1:0","tags":null,"title":"Impressum","uri":"/impressum/"},{"categories":null,"content":"Verantwortlich für den Inhalt nach § 55 Abs. 2 RStV: André Germann Hühnerkamp 4 21423 Winsen ","date":"01.02.2023","objectID":"/impressum/:2:0","tags":null,"title":"Impressum","uri":"/impressum/"},{"categories":null,"content":"Haftungsausschluss: Haftung für Inhalte Die Inhalte unserer Seiten wurden mit größter Sorgfalt erstellt. Für die Richtigkeit, Vollständigkeit und Aktualität der Inhalte können wir jedoch keine Gewähr übernehmen. Als Diensteanbieter sind wir gemäß § 7 Abs.1 TMG für eigene Inhalte auf diesen Seiten nach den allgemeinen Gesetzen verantwortlich. Nach §§ 8 bis 10 TMG sind wir als Diensteanbieter jedoch nicht verpflichtet, übermittelte oder gespeicherte fremde Informationen zu überwachen oder nach Umständen zu forschen, die auf eine rechtswidrige Tätigkeit hinweisen. Verpflichtungen zur Entfernung oder Sperrung der Nutzung von Informationen nach den allgemeinen Gesetzen bleiben hiervon unberührt. Eine diesbezügliche Haftung ist jedoch erst ab dem Zeitpunkt der Kenntnis einer konkreten Rechtsverletzung möglich. Bei Bekanntwerden von entsprechenden Rechtsverletzungen werden wir diese Inhalte umgehend entfernen. Haftung für Links Unser Angebot enthält Links zu externen Webseiten Dritter, auf deren Inhalte wir keinen Einfluss haben. Deshalb können wir für diese fremden Inhalte auch keine Gewähr übernehmen. Für die Inhalte der verlinkten Seiten ist stets der jeweilige Anbieter oder Betreiber der Seiten verantwortlich. Die verlinkten Seiten wurden zum Zeitpunkt der Verlinkung auf mögliche Rechtsverstöße überprüft. Rechtswidrige Inhalte waren zum Zeitpunkt der Verlinkung nicht erkennbar. Eine permanente inhaltliche Kontrolle der verlinkten Seiten ist jedoch ohne konkrete Anhaltspunkte einer Rechtsverletzung nicht zumutbar. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Links umgehend entfernen. Urheberrecht Die durch die Seitenbetreiber erstellten Inhalte und Werke auf diesen Seiten unterliegen dem deutschen Urheberrecht. Die Vervielfältigung, Bearbeitung, Verbreitung und jede Art der Verwertung außerhalb der Grenzen des Urheberrechtes bedürfen der schriftlichen Zustimmung des jeweiligen Autors bzw. Erstellers. Downloads und Kopien dieser Seite sind nur für den privaten, nicht kommerziellen Gebrauch gestattet. Soweit die Inhalte auf dieser Seite nicht vom Betreiber erstellt wurden, werden die Urheberrechte Dritter beachtet. Insbesondere werden Inhalte Dritter als solche gekennzeichnet. Sollten Sie trotzdem auf eine Urheberrechtsverletzung aufmerksam werden, bitten wir um einen entsprechenden Hinweis. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Inhalte umgehend entfernen. Datenschutz Die Nutzung unserer Webseite ist in der Regel ohne Angabe personenbezogener Daten möglich. Soweit auf unseren Seiten personenbezogene Daten (beispielsweise Name, Anschrift oder eMail-Adressen) erhoben werden, erfolgt dies, soweit möglich, stets auf freiwilliger Basis. Diese Daten werden ohne Ihre ausdrückliche Zustimmung nicht an Dritte weitergegeben. Wir weisen darauf hin, dass die Datenübertragung im Internet (z.B. bei der Kommunikation per E-Mail) Sicherheitslücken aufweisen kann. Ein lückenloser Schutz der Daten vor dem Zugriff durch Dritte ist nicht möglich. Der Nutzung von im Rahmen der Impressumspflicht veröffentlichten Kontaktdaten durch Dritte zur Übersendung von nicht ausdrücklich angeforderter Werbung und Informationsmaterialien wird hiermit ausdrücklich widersprochen. Die Betreiber der Seiten behalten sich ausdrücklich rechtliche Schritte im Falle der unverlangten Zusendung von Werbeinformationen, etwa durch Spam-Mails, vor. Website Impressum erstellt durch impressum-generator.de von der Kanzlei Hasselbach ","date":"01.02.2023","objectID":"/impressum/:3:0","tags":null,"title":"Impressum","uri":"/impressum/"},{"categories":null,"content":"Copyright (c) 2023 André Germann Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ","date":"01.01.0001","objectID":"/license/:0:0","tags":null,"title":"MIT License","uri":"/license/"}]